# -*- coding: utf-8 -*-
"""
Created on Thu Jun 16 13:25:09 2016

@author: psakicki
"""

from megalib import *
import acouclass as acls

path="/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/ARCHIVE_BATCH_RC_good/mk3_autentik_dekal_zonal"
path='/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/'
path="/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/ARCHIVE_BATCH_RC_good/mk5_jeu_sur_les_poids"

path="/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/ARCHIVE_BATCH_RC_good/mk5_jeu_sur_les_poids/avec_bcp_de_combis/BATCH_RC_mk5_authentik_dekal_zonal_noise_wo_10koef_1000_R1000_nois1-1e-06___"
path="/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/ARCHIVE_BATCH_RC_good/mk5_jeu_sur_les_poids/avec_bcp_de_combis/BATCH_RC_mk5_authentik_dekal_zonal_noise_wo_10koef_1000_R10_nois1-1e-06___"

path="/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/ARCHIVE_BATCH_RC_good/mk5_jeu_sur_les_poids/avec_moins_decombi"
path="/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/ARCHIVE_BATCH_RC_good/mk5_jeu_sur_les_poids/avec_moins_decombi"
path="/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/"
path='/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/ARCHIVE_BATCH_RC_good/mk5_jeu_sur_les_poids/combi_jug√©e_optimale'
path="/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/ARCHIVE_BATCH_RC_good/mk5_jeu_sur_les_poids/avec_bcp_de_combis"


path = '/home/psakicki/aaa_FOURBI/NEOBENCHMARKING_sur_BRISOTE/'

path = "/media/psakicki/Geo1_2To/CALIPSO/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/workingOLD/ANTERIEUR_0903_POUR_SALUBRITE/ARCHIVE_BATCH_RC_good/mk3_autentik_dekal_zonal"


with_plots = False

explis = glob.glob(path + '/BATCH_RC_mk5*')
explis = glob.glob(path + '//*__')

explis = glob.glob(path + '/*')


#explis = [path]

testparam = 'ecart 2D bary brut/vrai en distance'
restric_tup_lis = []

varparam_lis = ['bruit dZ' ,'bruit  Z','bruit PXP apriori']
varparam_lis = ["poids ASM","poids BL","poids dZ"] 

firstsW = []

Astk     = []
optimstk = []
titstk   = []
for exp in explis:

    if not os.path.isdir(exp):
        continue
    
    expdiclis = glob.glob(exp + '/*exp')

    print(os.path.basename(exp))
    lnes , header , idnum =  acls.table_summary_print(expdiclis,out_tab=0,
                                   out_exp_name_column=0,
                                   print_check_mark=1,
                                   title_testparam = "E_{G,2D}",
                                   chkmrk='BKSLHcmark',
                                   cross ='BKSLHxmark',
                                   varparam_lis = varparam_lis,
                                   varparam_are_bool=0)
    A = np.vstack(lnes)
    T =  tabulate.tabulate(lnes,header , floatfmt=".6f") #tablefmt='fancy_grid'
    F = open(os.path.join(exp,os.path.basename(exp)+'.tab'),'w+')

    F.write(T)
    print(T)
    F.close()
    
    Astk.append(A)
    optimstk.append(A[0,:-1])
    titstk.append(os.path.basename(exp))
    
    firstsW = firstsW + [l[:3] for l in lnes[:4]]

   
W = np.vstack(gf.uniqify_list_of_lists(firstsW))
W[:,1]

#optimtup_exemple = (optimaASM,optimaBL,optimaZ)
titletup         = ('ASM' , 'BL' , 'Z')

def extract_optim_experiences(A,optimtup):
    XYstk = []
    for ioptim in range(len(optimtup)):
        compl_inds = list(range(len(optimtup))) 
        compl_inds.remove(ioptim)
        #fig , ax = plt.subplots()
    
        Atmp = np.array(A)        
        
        for icompl in compl_inds:
            Atmp = Atmp[Atmp[:,icompl] == optimtup[icompl]]
            
        X = Atmp[:,ioptim]
        Y = Atmp[:,-1]
        XYstk.append((X,Y))
    
    return XYstk

cm    = plt.get_cmap('hsv')
COLOR = [cm(1.*i/len(optimstk)) for i in range(len(optimstk))]

for tit,A in zip(titstk,Astk):
    figaxlis = [plt.subplots() for i in range(len(titletup))]    
    for col , optim in zip(COLOR,optimstk):
        XYstk = extract_optim_experiences(A,optim)
        for ioptim , (X,Y) in enumerate(XYstk):
            fig , ax = figaxlis[ioptim]
            ax.loglog(X,Y,'x' , c=col)
            ax.set_xlabel(titletup[ioptim])
            fig.suptitle(tit)




#three_first_uniq = [list(x) for x in set(tuple(x) for x in three_first)]
#
#len(three_first)
#len(three_first_uniq)
#
#three_firstB = three_first_uniq + [[1.0, 0.0001, 0.0001], [0.10000000000000001, 1.0000000000000001e-05, 0.0001], [0.10000000000000001, 0.0001, 0.01], [0.10000000000000001, 0.0001, 0.001], [0.01, 9.9999999999999995e-07, 1.0000000000000001e-05], [0.01, 9.9999999999999995e-07, 0.0001], [0.001, 1.0, 0.10000000000000001], [9.9999999999999995e-07, 0.001, 0.0001]]
#three_firstB_uniq = [list(x) for x in set(tuple(x) for x in three_first_uniq)]
#
