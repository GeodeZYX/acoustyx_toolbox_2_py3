# -*- coding: utf-8 -*-
"""
Created on Tue Sep 20 14:27:09 2016

@author: psakicki
"""

from   megalib import *
import matplotlib.pyplot as plt

bigexppath = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/TRAJECT_NOISE_mk1/1000pings/'
bigexppath = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/TRAJECT_NOISE_mk1/100pings/'

bigexppath = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/OFFSETS_mk1/1000pings/"
bigexppath = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/OFFSETS_mk1/100pings/"

bigexppath = "/home/psakicki/aaa_FOURBI/OFFSETS_mk1/1000pings"
bigexppath = "/home/psakicki/aaa_FOURBI/OFFSETS_mk1/100pings"

bigexppath = "/home/psakicki/aaa_FOURBI/TRAJECT_NOISE_mk1/100pings"
bigexppath = "/home/psakicki/aaa_FOURBI/TRAJECT_NOISE_mk1/1000pings"

outdir = '/home/psakicki/aaa_FOURBI/'
nbpings = os.path.basename(bigexppath)

kw_carac   = 'offsets_'
kw_carac   = 'noise_'

if   kw_carac == 'offsets_':
    xxlable = "offset length on the trajectory (m, log. scale)"
    labelslgd=('Local X (Bow oriented) component',
       'Local Y (Starboard oriented) component',
       'Local Z (Seafloor oriented) component')
    labelslgd=['iX (Bow oriented) offset' ,'iY (Starboard oriented) offset',
               'iZ (Seafloor oriented) offset','iX and iY combined offsets']
    ylimm = (0,.45)
elif kw_carac == 'noise_':
    xxlable = r"Maximum 1-$\sigma$ noise possible on the trajectory (m, log. scale)"
    labelslgd=['iX (Bow oriented) perturbation' ,'iY (Starboard oriented) perturbation',
               'iZ (Seafloor oriented) perturbation','iX and iY combined perturbation']
    ylimm = (0,1.350)
       
FILES = glob.glob(bigexppath + "/*/*exp")

if len(FILES) == 0:
    print('FILES vide !!!')

DICOS = [gf.pickle_loader(F) for F in FILES]

D = DICOS[0]
list(D[-1].keys())

mode = '2D'

Xstk = []
Ystk = []

fig , ax = plt.subplots()

plt.xscale("log")
#plt.yscale("log")

off_traj_max_values = np.max(np.vstack([[float(e) for e in D[-1]['path'].split(kw_carac)[1].split('_')[:3]] for D in DICOS]),0)
print(off_traj_max_values , np.linalg.norm(off_traj_max_values))

colorlis = gf.color_list(labelslgd,'plasma')
   
block_x = 0
block_y = 0
block_z = 0

#norm,x,y,z
xaxis_data = "x"

#pie_or_bar = 'pie'

dx_only_stk = []
dy_only_stk = []
dz_only_stk = []
dx_dy_stk   = []

for D in DICOS:
    newcoords     = D[-1]['nouvelles coords.']
    ecart2D       = D[-1]['ecart 2D bary brut/vrai en distance']
    ecart3D       = D[-1]['ecart 3D bary brut/vrai en distance']
    ecartindiv    = D[-1]["ecart au bary brut/vrai en coords."]
    off_traj      = [float(e) for e in D[-1]['path'].split(kw_carac)[1].split('_')[:3]]
    
    if off_traj[1] == 0 and off_traj[2] == 0:
        dx_only_stk.append( (off_traj[0] , ecart2D , ecart3D) )
    if off_traj[0] == 0 and off_traj[2] == 0:
        dy_only_stk.append( (off_traj[1] , ecart2D , ecart3D) )
    if off_traj[0] == 0 and off_traj[1] == 0:
        dz_only_stk.append( (off_traj[2] , ecart2D , ecart3D) )
    if off_traj[0] == off_traj[1] and off_traj[2] == 0:
        dx_dy_stk.append( (off_traj[0] , ecart2D , ecart3D) )

ddd_stk_stk   = [dx_only_stk,dy_only_stk,dz_only_stk,dx_dy_stk]
label_stk_stk = labelslgd

for work_stk , label in zip(ddd_stk_stk,label_stk_stk):
    O,E2D,E3D = gf.sort_multinom_list(*list(zip(*work_stk)))
    if 'iX and iY' in label:    
        plt.plot(np.sqrt(2) * O,E2D,'-o',label=label)    
    else:
        plt.plot(O,E2D,'-o',label=label)    

plt.xlabel(xxlable)
#plt.ylim(ylimm)
plt.ylabel("2D distance difference compared \n to the barycenter true position (m)")
plt.legend()
from matplotlib.ticker import MultipleLocator
ml = MultipleLocator(.01)
ax.yaxis.set_minor_locator(ml)
plt.tight_layout()

for ext in ('.png','.pdf'):
    outpath = os.path.join(outdir,kw_carac + nbpings + ext)
    plt.savefig(outpath)
