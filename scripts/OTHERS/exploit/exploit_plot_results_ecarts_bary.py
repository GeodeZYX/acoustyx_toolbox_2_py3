# -*- coding: utf-8 -*-
"""
Created on Mon Jun 20 18:34:08 2016

@author: psakicki
"""

from megalib import *
import acouclass as acls
import inspect
import matplotlib.pyplot as plt
import re

import matplotlib as mpl
mpl.rcParams['axes.labelpad'] = 2

mpl.rcParams['figure.subplot.left']    = 0.2  # the left side of the subplots of the figure
mpl.rcParams['figure.subplot.right']   = 0.9    # the right side of the subplots of the figure
mpl.rcParams['figure.subplot.bottom']  = 0.2    # the bottom of the subplots of the figure
mpl.rcParams['figure.subplot.top']     = 0.9    # the top of the subplots of the figure

path     = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/ARCHIVE_BATCH_RC_good/mk5_jeu_sur_les_poids/avec_bcp_de_combis/BATCH_RC_mk5_authentik_dekal_zonal_noise_wo_10koef_1000_R1000_nois1-1e-06___'
genepath = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/ARCHIVE_BATCH_RC_good/mk3_autentik_dekal_zonal/'

genepath = '/home/psakicki/aaa_FOURBI/NEOBENCHMARKING_sur_BRISOTE'
genepath = "/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/BENCHMARKING_INTIAL/benchmarking_a_lancienne_avec_les_FINALb"

genepath = "/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/BENCHMARKING_INTIAL/integralite_des_FINALb_avec_juste_2modes_dont_1_faux"

genepath = '/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/BENCHMARKING_INTIAL/integralite_des_FINALb_avec_3modes'

genepath = "/home/psakicki/aaa_FOURBI/RB_EGU18/"

genepath = "/home/psakicki/aaa_FOURBI/REBOOT1802_WORK_FAST"

genepath = "/media/psakicki/Geo1_2To/CALIPSO/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/workingOLD/ANTERIEUR_0903_POUR_SALUBRITE/ARCHIVE_BATCH_RC_good/mk3_autentik_dekal_zonal"
genepath = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/1807_Article_GNSSA_ObsAnex/mk3_autentik_dekal_zonal_REBOOT1807_sigma_dZ_fixe"

#plt.ioff()
plt.ion()


with_exclusion = True
keep_instead_of_excl = True # !!! not implemented yet !!!
excl_any_or_all = np.all    # !!! not implemented yet !!!

excl_dic = dict()
excl_dic["with_monoZ"] = True
excl_dic["with_dzcst"] = True 

excl_dic_list = [excl_dic]


############## le monoZ seul => pour monter que ca fait de la merde
excl_dic1 = dict()
excl_dic1['with_monoZ']      = True
excl_dic1['with_barycenter'] = False
excl_dic1['with_BL']         = False
excl_dic1['with_dzcst']      = False
excl_dic1['with_zmaster']    = False

excl_dic2 = dict()
excl_dic2['with_monoZ']      = True
excl_dic2['with_barycenter'] = True
excl_dic2['with_BL']         = False
excl_dic2['with_dzcst']      = False
excl_dic2['with_zmaster']    = False


##############  sans rien 
excl_dic3 = dict()
excl_dic3['with_monoZ']      = False
excl_dic3['with_barycenter'] = False
excl_dic3['with_BL']         = False
excl_dic3['with_dzcst']      = False
excl_dic3['with_zmaster']    = False
    
excl_dic4 = dict()
excl_dic4['with_monoZ']      = False
excl_dic4['with_barycenter'] = True
excl_dic4['with_BL']         = False
excl_dic4['with_dzcst']      = False
excl_dic4['with_zmaster']    = False

############## la BL seul
excl_dic5 = dict()
excl_dic5['with_monoZ']      = False
excl_dic5['with_barycenter'] = False
excl_dic5['with_BL']         = True
excl_dic5['with_dzcst']      = False
excl_dic5['with_zmaster']    = False

excl_dic6 = dict()
excl_dic6['with_monoZ']      = False
excl_dic6['with_barycenter'] = True
excl_dic6['with_BL']         = True
excl_dic6['with_dzcst']      = False
excl_dic6['with_zmaster']    = False

############## la BL + dz cst
excl_dic51 = dict()
excl_dic51['with_monoZ']      = True
excl_dic51['with_barycenter'] = False
excl_dic51['with_BL']         = True
excl_dic51['with_dzcst']      = True
excl_dic51['with_zmaster']    = False

excl_dic61 = dict()
excl_dic61['with_monoZ']      = True
excl_dic61['with_barycenter'] = True
excl_dic61['with_BL']         = True
excl_dic61['with_dzcst']      = True
excl_dic61['with_zmaster']    = False

############## la BL + dz obs
excl_dic7 = dict()
excl_dic7['with_monoZ']      = False
excl_dic7['with_barycenter'] = True
excl_dic7['with_BL']         = True
excl_dic7['with_dzcst']      = False
excl_dic7['with_zmaster']    = True


############## la dz obs
excl_dic8 = dict()
excl_dic8['with_monoZ']      = True
excl_dic8['with_barycenter'] = False
excl_dic8['with_BL']         = False
excl_dic8['with_dzcst']      = True
excl_dic8['with_zmaster']    = False

excl_dic9 = dict()
excl_dic9['with_monoZ']      = True
excl_dic9['with_barycenter'] = True
excl_dic9['with_BL']         = False
excl_dic9['with_dzcst']      = True
excl_dic9['with_zmaster']    = False

excl_dic_list = [excl_dic1,excl_dic2,
                 excl_dic3,excl_dic4,
                 excl_dic5,excl_dic6,
                 excl_dic7,excl_dic8,
                 excl_dic9,excl_dic51,
                 excl_dic61]

    
for path in sorted(glob.glob(genepath + '/*')):
    
    if not os.path.isdir(path):
        continue
    
    exp_name = os.path.basename(path)
    
    expdiclis4plot = glob.glob(path + '/*exp')
    
    if with_exclusion:
        expdiclis4plot_clean = []
        for f in expdiclis4plot:
            tmpdic = gf.pickle_loader(f)
            bool_stk_big = []
            for excl_dic in excl_dic_list:
                bool_stk = []
                for key , val in excl_dic.items():
                    if tmpdic[-1]["params var. de l'exp."][key] == excl_dic[key]:
                        bool_stk.append(True)
                    else:
                        bool_stk.append(False)
            
                bool_stk_big.append(bool_stk)
            
            
            final_keep_bool = np.any([np.all(e) for e in bool_stk_big])
                
            if final_keep_bool:
                expdiclis4plot_clean.append(f)
                
        expdiclis4plot = expdiclis4plot_clean

    if "R10_" in exp_name:
        tit = "10m diam. circle"
    elif "R100_" in exp_name:
        tit = "100m diam. circle"
    elif "R1000_" in exp_name:
        tit = "1000m diam. circle"
    elif "3x333" in exp_name:
        tit = "3 passes"
            
    # =========== PLOT
    plt.close("all")
    fig , ax , defcol_str = acls.plot_cntr_from_expdics(expdiclis4plot,size_inch=5,
                                print_labels = False,
                                print_legend=0,
                                size_pts=360,
                                generate_color_4_latex=1,
                                alpha=0.6,
                                alti_plot=0,print_title=0,
                                close_plt=False,
                                lim_inp = [ -1 , 1 ],
                                outdir = path,
                                plot_title="Difference to true barycenter for a\n" + tit + " trajectory")
    
    #fig.set_size_inches(20,20)
    
    # =========== TABLEAU
    
    varparam_lis = ['with_monoZ', 'with_barycenter', 'with_BL' , 
                    'with_zmaster']

    varparam_lis = ['with_monoZ', 'with_barycenter', 'with_BL' , 
                    'with_dzcst', 'with_zmaster']


    varparam_lis = ['with_barycenter', 'with_BL' , 'with_monoZ',
                    'with_dzcst', 'with_zmaster']
    
    testparam      = 'sigmas'
    title_testparam= "sigmas"

    testparam = 'ecart 2D bary brut/vrai en distance'
    title_testparam = "E_{G,2D}"

    expdiclis4tab = glob.glob(path + '/*exp')
    
    expdiclis4tab = expdiclis4plot
    
    #chkmrk='BKSLHcmark'
    #cross ='BKSLHxmark'
    
    testparam = ['ecart 2D bary brut/vrai en distance',"sigmas"]
    title_testparam = ["E_{G,2D}","sigma"]
    
    testparam = ['ecart 2D bary brut/vrai en distance']
    title_testparam = ["E_{G,2D}"]
    
    outtup = acls.table_summary_print(expdiclis4tab,out_tab=0,
                               out_exp_name_column=0,
                               print_check_mark=1,
                               title_testparam = title_testparam,
                               varparam_lis = varparam_lis,
                               varparam_are_bool=1,
                               normalize_column_title_size = False,
                               testparam = testparam,
                               slice_for_iterable_value=slice(0,2),
                               sort_index_if_multi_testparam = -2)
    
    tab = tabulate.tabulate(outtup[0],headers=outtup[1],tablefmt="latex")
    tabpath   = gf.write_in_file(tab , path ,'summary_tab_' + exp_name)
    colorpath = gf.write_in_file(defcol_str , path ,'summary_tab_color_' + exp_name)

    
    print('tab exported in :')
    print(tabpath)
    
    ########### insert hlines
    if "3x333" in exp_name:
        hline_posi_in_file = [6,9,11,16]
    else:
        hline_posi_in_file = [6,8,11,16]
    gf.insert_lines_in_file(tabpath,
                            ["\hline \n"]*len(hline_posi_in_file),
                            hline_posi_in_file)
        
    
    ######### insert htop
    color_id_list = [e[13:21] for e in defcol_str.split()]
    for col in color_id_list:
        col2insert = " \\tbc{"+ col +"} & "
        gf.insert_str_in_file_if_line_contains(tabpath,col2insert,("^ ✗ .*","^ ✓ .*"),
                                               only_first_occur=True)

    print('=====', exp_name)
    print(tab)
    
    
    ##############' replace header 
    pattern = " with\_barycenter   & with\_BL   & with\_monoZ   & with\_dzcst   & with\_zmaster   &     E\_\{G,2D\} \\"
    subst   = " & \dblcel[t]{barycentrer direct\\ estimation} & \dblcel[t]{With \\ baselines} & \dblcel[t]{Single depth \\ estimation $\\bar{z}$} & \dblcel[t]{ With $\delta z$  as \\ constants}  &  \dblcel[t]{With $\delta z$  as \\observations}   &   $E_{G,2D}$ (m) \\"
    gf.replace(tabpath, pattern, subst)
    pattern = "\begin{tabular}{lllllr}"
    subst   = "\begin{tabular}{ccccccl}"
    gf.replace(tabpath, pattern, subst)
    pattern = "✗"
    subst   = "\\nonn"
    gf.replace(tabpath, pattern, subst)
    pattern = "✓"
    subst   = "\ouii"
    gf.replace(tabpath, pattern, subst)        
    pattern = "        "
    subst   = ""
    gf.replace(tabpath, pattern, subst)       