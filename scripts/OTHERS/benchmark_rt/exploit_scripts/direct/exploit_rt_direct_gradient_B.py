# -*- coding: utf-8 -*-
"""
Created on Thu Feb 25 20:00:15 2016

@author: psakicki
"""

from megalib import *
import matplotlib.pyplot as plt

if gf.get_computer_name() == 'calipso':
    pickdir = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/direct/"
    plotdir = "/home/psakicki/THESE/RENDU/1603_graphs_benchmk_rt/direct_gradient/"
    plotdir = "/home/psakicki/THESE/RENDU/1703_graphs_benchmk_rt_REBOOT/direct_gradient/"

else:    
    pickdir =  "/home/psakicki/Documents/CODES/acoustyx_toolbox_2/scripts/benchmark_rt/results/direct/"
    plotdir = "/home/psakicki//RENDU_1603_graphs_benchmk_rt/direct_gradient/"

plotdir = gf.create_dir(plotdir)

# REBOOT 1703
path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results_REBOOT1703/Run_1/20170324_160504_benmk_direct_grd_atal.pik'
path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results_REBOOT1703/Run_1/20170324_160512_benmk_direct_grd_meteor.pik'

# FIRST VERSION
path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160226_155455_benmk_direct_tstgrd.pik'
path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160226_155455_benmk_direct_tstgrd.pik'
path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160309_173215_benmk_direct_grd.pik'
path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160310_171652_benmk_direct_grd.pik'


D    = gf.pickle_loader(path)

#gros nettoyage de equivalents qui servent à rien

for item in list(D.items()):
    for k in list(item[1].keys()):
        if 'equiv' in k:
            item[1].pop(k,None)






stklis = []         
for k1 , item1 in list(D.items()):
    _,_,zmax,ang,_,zsmooth,smoothtype,xgrad,ygrad = k1
    for k2 , item2 in list(item1.items()): 
        if k2 == 'eiko':
            r_eiko  = geok.pythagore(*item2[0][0][0:2])
            z_eiko  = item2[0][0][2]
            pt_eiko = np.array([r_eiko , z_eiko])
            t_eiko  = item2[0][-1]
            
            r_eiko_ref  = geok.pythagore(*item2[1][0][0:2])
            z_eiko_ref  = item2[1][0][2]
            pt_eiko_ref = np.array([r_eiko_ref , z_eiko_ref])
            t_eiko_ref  = item2[1][-1]
            
                    
        elif k2 == 'SD':
            r_sd    = item2[0][0]
            z_sd    = item2[0][1]
            pt_sd   = np.array([r_sd   , z_sd])
            t_sd    = item2[0][2]     
            
        
    try:  
        diff = pt_eiko - pt_eiko_ref
        diff_t = t_eiko - t_eiko_ref

        if smoothtype == 'lin':
            smoothtypenum = 0
        else:
            smoothtypenum = 1
        print(zmax,ang,zsmooth,smoothtype,xgrad,ygrad,diff,np.linalg.norm(diff))
        stklis.append([zmax,ang,zsmooth,smoothtype,xgrad,ygrad,
                       r_eiko,z_eiko,pt_eiko[0],pt_eiko[1],t_eiko,
                       r_sd,  z_sd,  pt_sd[0]  ,pt_sd[1]  ,t_sd,
                       diff[0],diff[1],np.linalg.norm(diff),np.abs(diff_t)])

        if diff[1] > 500:
            break
    except:
        print("ca chie")
        continue


#ax.set_xscale('log')
#ax.set_yscale('log')



import pandas as pds
pda = pds.DataFrame(stklis)

#pdaPanda = pdaPanda.sort_values([0,1,2,4])

rnamedic = gf.renamedic_fast_4_pandas(*["zmax","ang","zsmooth","smoothtype","xgrad","ygrad",
                                       'r_eiko','z_eiko','pt_eiko_x','pt_eiko_y',"t_eiko",
                                       'r_sd',  'z_sd',  'pt_sd_x'  ,'pt_sd_y'  ,'t_sd',
                                       'diff_x','diff_y','diff','diff_t'])

pda = pda.rename(columns = rnamedic)

pdw = copy.deepcopy(pda)
pdw = pdw[ pdw['smoothtype'] == 'lin' ]
pdw = pdw[ pdw['ang']        == 40    ]
pdw = pdw[ pdw['zmax']       == 2000  ]

fig , ax = plt.subplots(1,2)

colis = gf.color_list(pdw['xgrad'])


for i,xgrad in enumerate(np.unique(pdw['xgrad'])):
    pdww = pdw[(pdw['xgrad'] == xgrad)]
    X,Y = gf.sort_binom_list(pdww['zsmooth'] , pdww['diff'])
    ax[0].plot(X,Y,'o-', c=colis[i] , label = str(xgrad) + 'm/s/m' )
    X,Y = gf.sort_binom_list(pdww['zsmooth'] , pdww['diff_t'])
    ax[1].plot(X,Y,'o-', c=colis[i] , label = str(xgrad) + 'm/s/m')
                
[a.legend(loc=0) for a in ax]
[a.set_yscale('log') for a in ax]

[a.set_xlabel("mixed layer depth (m)") for a in ax]  
ax[0].set_ylabel("distance difference (m), log.scale" )
ax[1].set_ylabel("time difference (s), log.scale" )
ax[0].set_title("point position difference in function of \n the mixed layer size for different gradients" )
ax[1].set_title("time difference in function of \n the mixed layer size for different gradients" )
fig.suptitle("point position and time difference compared to a eikonikal raytracing without gradient \n in function of the mixed layer size for different gradients (shooting angle = 45°, max. depth = 2000m)")
#plt.ticklabel_format(style='sci', axis='y', scilimits=(0,0))

fig.set_size_inches(11.69,8.27)
fig.tight_layout()
plt.subplots_adjust(top=0.86)

pltname = gf.join_improved('_', 'direct','grad', 'zsmooth')

pltpath = os.path.join(plotdir, pltname)
plt.savefig(pltpath + '.png')
plt.savefig(pltpath + '.pdf')

###############################################################################

fig , ax = plt.subplots(1,2)
[a.set_xscale('log') for a in ax]
[a.set_yscale('log') for a in ax]

colis = gf.color_list(pdw['zsmooth'])

for i , zsmooth in enumerate(np.unique(pdw['zsmooth'])):
    pdww = pdw[(pdw['zsmooth'] == zsmooth)]
    X,Y = gf.sort_binom_list(pdww['xgrad'] , pdww['diff'])
    ax[0].plot(X,Y,'o-', c=colis[i] , label = str(zsmooth)+'m')
    X,Y = gf.sort_binom_list(pdww['xgrad'] , pdww['diff_t'])
    ax[1].plot(X,Y,'o-', c=colis[i], label = str(zsmooth)+'m')
    
[a.legend(loc=0) for a in ax]
[a.set_xlabel("gradient (m/s/m), log.scale") for a in ax]  
ax[0].set_ylabel("distance difference (m), log.scale" )
ax[1].set_ylabel("time difference (s), log.scale" )
ax[0].set_title("point position difference in function \n of the gradient for different mixed layers" )
ax[1].set_title("time difference in function of  \n the gradient for different mixed layers" )
fig.suptitle("point position and time difference compared to a eikonikal raytracing without gradient \n in function of the emission angle for different mixed layers (shooting angle = 45°, max. depth = 2000m)")
#plt.ticklabel_format(style='sci', axis='y', scilimits=(0,0))

fig.set_size_inches(11.69,8.27)
fig.tight_layout()
plt.subplots_adjust(top=0.86)

pltname = gf.join_improved('_', 'direct','grad', 'grad')

pltpath = os.path.join(plotdir, pltname)
plt.savefig(pltpath + '.png')
plt.savefig(pltpath + '.pdf')

###############################################################################

pdw = copy.deepcopy(pda)
pdw = pdw[ pdw['zmax']  == 2000  ]
pdw = pdw[ pdw['smoothtype']  == 'lin'  ]

minn = 0.000001
maxx = np.max(pdw['xgrad'])
pdw = pdw[ (pdw['xgrad'] == minn) | (pdw['xgrad'] == maxx) ]

fig , ax = plt.subplots(1,2)
[a.set_yscale('log') for a in ax]


zsmooth_uniq = list(np.unique(pdw['zsmooth']))
colis = gf.color_list(zsmooth_uniq)

for xgrad in np.unique(pdw['xgrad']):
    for i , zsmooth in enumerate(np.unique(pdw['zsmooth'])):
        pdww = pdw[(pdw['zsmooth'] == zsmooth) & (pdw["xgrad"] == xgrad)]

        X0,Y0 = gf.sort_binom_list(pdww['ang'] , np.abs(pdww['diff']))
        X1,Y1 = gf.sort_binom_list(pdww['ang'] , np.abs(pdww['diff_t']))
        
        if np.sum(Y0) == 0 or np.sum(Y1) == 0:
            print("aaaaa")
            continue

        if np.isclose(xgrad , minn):
            symb = "-v"
        if np.isclose(xgrad , maxx):
            symb = '-^'
        print(symb)
        
        ax[0].plot(X0,Y0,symb, c=colis[zsmooth_uniq.index(zsmooth)], label = str(zsmooth)+'m')
        ax[1].plot(X1,Y1,symb, c=colis[zsmooth_uniq.index(zsmooth)], label = str(zsmooth) +'m')

ax[0].set_ylabel("distance difference (m), log.scale" )
ax[1].set_ylabel("time difference (s), log.scale" )
ax[0].set_title("point position difference in function of the emission angle \n for different X-gradients and mixed layers" )
ax[1].set_title("time difference in function of the emission angle \n for different X-gradients and mixed layers" )
[a.legend(loc=0) for a in ax]
[a.set_xlabel("emission angle (deg)") for a in ax]  
fig.suptitle("point position and time difference compared to a eikonikal raytracing without gradient in function of the emission angle for different X-gradients and mixed layers")
print('aaaa')
#ax[0].ticklabel_format(style='sci', axis='y', scilimits=(0,0))

fig.set_size_inches(11.69,8.27)
fig.tight_layout()
plt.subplots_adjust(top=0.86)

pltname = gf.join_improved('_', 'direct','grad', 'ang')
                           
pltpath = os.path.join(plotdir, pltname)
plt.savefig(pltpath + '.png')
plt.savefig(pltpath + '.pdf')

###############################################################################