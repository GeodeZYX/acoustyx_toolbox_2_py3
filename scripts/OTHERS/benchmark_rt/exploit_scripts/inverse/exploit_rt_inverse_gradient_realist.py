# -*- coding: utf-8 -*-
"""
Created on Sat Mar 19 14:23:41 2016

@author: psakicki
"""

from megalib import *

#L = gf.pickle_loader("/home/psakicki/Documents/CODES/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160316_052748benmk_inverse_grd.pik")


if gf.get_computer_name() == 'calipso':
    dir_prefix = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/'
elif gf.get_computer_name() == '':
    dir_prefix = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/'


# FIRST VERSION
path = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160316_052748benmk_inverse_grd.pik"
# REBOOT 1703
protopath =  dir_prefix + '/scripts/benchmark_rt/results_REBOOT1703/inverse/*pik'


Lpath = glob.glob(protopath)

ZZZ , CCC = rt.munk(6000)

for path in Lpath:
    L = gf.pickle_loader(path)
    
    plotdir = "/home/psakicki/THESE/RENDU/1603_graphs_benchmk_rt/indirect_gradient"
    plotdir = "/home/psakicki/THESE/RENDU/1703_graphs_benchmk_rt_REBOOT/indirect_gradient"
    plotdir = dir_prefix + "/scripts/benchmark_rt/results_REBOOT1703/PLOT/"
    
    plotdir = gf.create_dir(plotdir)
    
    linlog = "linear"
    linlog = "log"
    
    if linlog == 'linear':
        logsuffix = ''
    else:
        logsuffix = ' (log. scale)'
        
    
    logsuffix = ''
    
    params_lis        = []
    eiko_grad_lis     = []
    eiko_proto_lis    = []
    eiko_x_grad_lis   = []
    eiko_x_proto_lis  = []
    diff_lis          = []
    diff_t_lis        = []
    tup_lis           = []
    
    t_raw_eiko_lis    = []
    t_raw_proto_lis   = []
    
    
    for i_exp,exp in enumerate(L):
        params          = exp[0]
        try:
            eiko        = exp[2]
            eiko_grad   = eiko[0:3]
            eiko_proto  = eiko[3:6]
        except:
            continue
        
        params_lis.append(params)
        
        eiko_grad_lis.append(eiko_grad)
        eiko_proto_lis.append(eiko_proto)
        eiko_x_grad_lis.append(eiko_grad[0].x)
        eiko_x_proto_lis.append(eiko_proto[0].x)   
        diff_lis.append(eiko_grad[0].x - eiko_proto[0].x)
        diff_t_lis.append(eiko_grad[1][-1] - eiko_proto[1][-1])

        t_raw_proto_lis.append(eiko_proto[1][-1])
        t_raw_eiko_lis.append(eiko_grad[1][-1])

        
        tup_lis.append(params[:-1] + tuple(diff_lis[-1]) + (diff_t_lis[-1],) + \
                      (t_raw_proto_lis[-1],) + (t_raw_eiko_lis[-1],) + \
                      (eiko_grad[0].x[0],)   + (eiko_proto[0].x[0],))
    
    DF = pd.DataFrame(tup_lis)
    
    rnamedic = gf.renamedic_fast_4_pandas("h","restype","adap",
                                        "xr","yr","zr","zsmooth",
                                        "smoothtype","xgrad","ygrad",
                                        "diff_ang1","diff_ang2",
                                        "diff_s","diff_t",
                                        "t_raw_proto","t_raw_eiko",
                                        "ang_proto", "ang_eiko")
    
    DF = DF.rename(columns = rnamedic)
    
    ####################################################
    
    pdw = copy.deepcopy(DF)
    
    fig , ax           = plt.subplots(1,3)
    fig_disc , ax_disc = plt.subplots(1,1)
    
    #from matplotlib import rc
    #rc('text',usetex=True)
    
    [a.set_xlabel("X component (m)") for a in ax]  
    ax[0].set_ylabel("emitting angle difference (deg)" + logsuffix )
    ax[1].set_ylabel("path length difference (m)" + logsuffix)
    ax[2].set_ylabel("time difference (s)" + logsuffix)
    ax[0].set_title("emitting angle difference" )
    ax[1].set_title("path length" )
    ax[2].set_title("propagation time difference" )
    
    fig.suptitle('emitting angle, path length and propagation time difference in function of planimetric distance between source & reciever and the depth' )
    
    #plt.ticklabel_format(style='sci', axis='y', scilimits=(0,0))
    
    if 0:
        [a.set_yscale('log') for a in ax]
        linlog = 'log. scale'
    else:
        [a.set_yscale('linear') for a in ax]
        linlog = 'lin. scale'  
        [a.ticklabel_format(style='sci', axis='y', scilimits=(0,0),useOffset=False) for a in ax]
        [a.yaxis.set_major_formatter(FormatStrFormatter('%.1e')) for a in ax]
    
    
    colzr_lis = list(reversed(gf.color_list(np.unique(pdw['zr']))))
    
    def ident(x):
        return x
    
    fctabs = np.abs
    
    for zr , colzr in zip(np.unique(pdw['zr']),colzr_lis):
        
        pdww = pdw[pdw['zr'] == zr]
        
        X,Y = gf.sort_binom_list(pdww['xr'] , fctabs(pdww['diff_ang1']))
        ax[0].plot(X,Y,'o-',c=colzr , label = str(zr) + 'm')
        X,Y = gf.sort_binom_list(pdww['xr'] , fctabs(pdww['diff_s']))
        ax[1].plot(X,Y,'o-',c=colzr , label = str(zr) + 'm')
        X,Y = gf.sort_binom_list(pdww['xr'] , fctabs(pdww['diff_t']))
        ax[2].plot(X,Y,'o-',c=colzr , label = str(zr) + 'm')
        

    leglis = [a.legend(loc=0,title=r'$\bf{Depth}$') for a in ax]
    [leg.get_frame().set_alpha(0.5) for leg in leglis]
    
    #fig.set_size_inches(16.53/2,11.69/2)
    fig.set_size_inches(11.69,8.27/2)
    fig.tight_layout()
    plt.subplots_adjust(top=0.87)
    
    ship = os.path.basename(path).split('.')[0].split('_')[-1]
    ship = os.path.basename(path).split('.')[0].split('inverse_')[-1]
        
    pltname = gf.join_improved('_', 'inverse','real', ship)
                               
    gf.create_dir(plotdir)
    pltpath = os.path.join(plotdir, pltname)
    plt.savefig(pltpath + '.png')
    plt.savefig(pltpath + '.pdf')
    

pdw = copy.deepcopy(DF)


for zr , colzr in zip(np.unique(pdw['zr']),colzr_lis):
    
    pdww = pdw[pdw['zr'] == zr]

    dt_plot_lis = []
    #### PARTIE POUR LES GRAPH DE LA DISCUSSION 
    for a , tr , dt in zip(np.abs(pdww['ang_proto']) ,
                   pdww['t_raw_proto'] , 
                   pdww['diff_t']):
        XXX0 , ZZZ0 , TTT0 , DDD0 , _ =  rt.raytrace_ultimate(0,0,a, tr + 0 ,ZZZ,CCC)
        XXX1 , ZZZ1 , TTT1 , DDD1 , _ =  rt.raytrace_ultimate(0,0,a, tr + dt,ZZZ,CCC)
        
        xxx0 = XXX0[-1]
        xxx1 = XXX1[-1]
        zzz0 = ZZZ0[-1]
        zzz1 = ZZZ1[-1]
        
        ax_disc.scatter(zzz0 - zzz1)

    
    #plt.clf()