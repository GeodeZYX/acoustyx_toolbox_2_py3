# -*- coding: utf-8 -*-
"""
Created on Sat Mar 19 14:23:41 2016

@author: psakicki
"""

from megalib import *

#L = gf.pickle_loader("/home/psakicki/Documents/CODES/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160316_052748benmk_inverse_grd.pik")

# FIRST VERSION
path = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160316_052748benmk_inverse_grd.pik"
# REBOOT 1703
#path = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results_REBOOT1703/Run_2/20170327_185031benmk_inverse_grd_atal.pik"
#path = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results_REBOOT1703/Run_2/20170327_185030benmk_inverse_grd_meteor.pik"

# FIRST VERSION
path = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160316_052748benmk_inverse_grd.pik"
# REBOOT 1703
#path = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results_REBOOT1703/Run_2/20170327_185031benmk_inverse_grd_atal.pik"
path = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results_REBOOT1703/Run_2/20170327_185030benmk_inverse_grd_meteor.pik"
L = gf.pickle_loader(path)


plotdir = "/home/psakicki/THESE/RENDU/1603_graphs_benchmk_rt/indirect_gradient"
plotdir = "/home/psakicki/THESE/RENDU/1703_graphs_benchmk_rt_REBOOT/indirect_gradient"

plotdir = gf.create_dir(plotdir)

linlog = "linear"
linlog = "log"

if linlog == 'linear':
    logsuffix = ''
else:
    logsuffix = ' (log. scale)'
    


params_lis        = []
eiko_grad_lis     = []
eiko_proto_lis    = []
eiko_x_grad_lis   = []
eiko_x_proto_lis  = []
diff_lis          = []
diff_t_lis        = []
tup_lis           = []

for i_exp,exp in enumerate(L):
    params          = exp[0]
    try:
        eiko        = exp[2]
        eiko_grad   = eiko[0:3]
        eiko_proto  = eiko[3:6]
    except:
        continue
    
    params_lis.append(params)
    
    eiko_grad_lis.append(eiko_grad)
    eiko_proto_lis.append(eiko_proto)
    eiko_x_grad_lis.append(eiko_grad[0].x)
    eiko_x_proto_lis.append(eiko_proto[0].x)   
    diff_lis.append(eiko_grad[0].x - eiko_proto[0].x)
    diff_t_lis.append(eiko_grad[1][-1] - eiko_proto[1][-1])
    
    tup_lis.append(params[:-1] + tuple(diff_lis[-1]) + (diff_t_lis[-1],))

#DF = pd.DataFrame(tup_lis)

#rnamedic = gf.renamedic_fast_4_pandas("h","restype","adap",
#                                    "xr","yr","zr","zsmooth",
#                                    "smoothtype","xgrad","ygrad",
#                                    "diff_ang1","diff_ang2",
#                                    "diff_s","diff_t")


rnamedic = ["h","restype","adap",
                                    "xr","yr","zr","zsmooth",
                                    "smoothtype","xgrad","ygrad",
                                    "diff_ang1","diff_ang2",
                                    "diff_s","diff_t"]


DF = pd.DataFrame(tup_lis, columns = rnamedic)

#DF = DF.rename(columns = rnamedic)

###############################################################################

pdw = copy.deepcopy(DF)
pdw = pdw[ pdw['smoothtype'] == 'lin' ]

XR , YR , ZR = 2000 , 0 , 2000 

pdw = pdw[ pdw['xr'] == XR ]
pdw = pdw[ pdw['yr'] == YR ]
pdw = pdw[ pdw['zr'] == ZR ]

fig , ax = plt.subplots(1,3)

colis = gf.color_list(pdw['xgrad'])

for i,xgrad in enumerate(np.unique(pdw['xgrad'])):
    pdww = pdw[(pdw['xgrad'] == xgrad)]
    X,Y = gf.sort_binom_list(pdww['zsmooth'] , pdww['diff_ang1'])
    if linlog == 'log':
        Y = np.abs(Y)
    ax[0].plot(X,Y,'o-', c=colis[i] , label = str(xgrad) + 'm/s/m' )
    X,Y = gf.sort_binom_list(pdww['zsmooth'] , pdww['diff_s'])
    if linlog == 'log':
        Y = np.abs(Y)
    ax[1].plot(X,Y,'o-', c=colis[i] , label = str(xgrad) + 'm/s/m')
    X,Y = gf.sort_binom_list(pdww['zsmooth'] , pdww['diff_t'])
    if linlog == 'log':
        Y = np.abs(Y)
    ax[2].plot(X,Y,'o-', c=colis[i] , label = str(xgrad) + 'm/s/m')

leglis = [a.legend(loc=0) for a in ax]
[leg.get_frame().set_alpha(0.5) for leg in leglis]
[a.set_yscale(linlog) for a in ax]

[a.set_xlabel("mixed layer depth (m)") for a in ax]  
ax[0].set_ylabel("emitting angle difference (deg)" + logsuffix )
ax[1].set_ylabel("path length difference (m)" + logsuffix)
ax[2].set_ylabel("time difference (s)" + logsuffix)
ax[0].set_title("point position difference in function of \n the mixed layer size for different gradients" )
ax[1].set_title("path length difference in function of \n the mixed layer size for different gradients" )
ax[2].set_title("time difference in function of \n the mixed layer size for different gradients" )
if not linlog == 'log':
    ax[2].ticklabel_format(style='sci', axis='y', scilimits=(0,0))

fig.suptitle("point position and time difference compared to a eikonikal raytracing without gradient \n in function of the mixed layer size for different gradients (reciever point at " + str([XR,YR,ZR]) + ')' )
#plt.ticklabel_format(style='sci', axis='y', scilimits=(0,0))

fig.set_size_inches(16.53,11.69/2)
fig.tight_layout()
plt.subplots_adjust(top=0.83)

pltname = gf.join_improved('_', 'indirect','grad', 'mixlayer')
pltpath = os.path.join(plotdir, pltname)
plt.savefig(pltpath + '.png')
plt.savefig(pltpath + '.pdf')

###############################################################################

pdw = copy.deepcopy(DF)
pdw = pdw[ pdw['smoothtype'] == 'lin' ]

XR , YR , ZR = 2000 , 0 , 2000 
mixlay = 200

#gradmin    = np.min(pdw['xgrad'])
#gradmax    = np.max(pdw['xgrad'])
#zsmoothmin = np.min(pdw['zsmooth'])
#zsmoothmax = np.max(pdw['zsmooth'])

#pdw = pdw[ pdw['xr'] == XR ]
pdw = pdw[ pdw['yr'] == YR ]
pdw = pdw[ pdw['zr'] == ZR ]

pdw = pdw[ pdw['zsmooth'] == mixlay ]
fig , ax = plt.subplots(1,3)
colis = gf.color_list(np.unique(pdw['xgrad']))

for i,xgrad in enumerate(np.unique(pdw['xgrad'])):
    pdww = pdw[(pdw['xgrad'] == xgrad)] 
    X,Y = gf.sort_binom_list(pdww['xr'] , pdww['diff_ang1'])
    if linlog == 'log':
        Y = np.abs(Y)
    ax[0].plot(X,Y, 'o-', c=colis[i] , label = str(xgrad) + 'm/s/m' )
    X,Y = gf.sort_binom_list(pdww['xr'] , pdww['diff_s'])
    if linlog == 'log':
        Y = np.abs(Y)
    ax[1].plot(X,Y, 'o-', c=colis[i] , label = str(xgrad) + 'm/s/m')
    X,Y = gf.sort_binom_list(pdww['xr'] , pdww['diff_t'])
    if linlog == 'log':
        Y = np.abs(Y)
    ax[2].plot(X,Y, 'o-', c=colis[i] , label = str(xgrad) + 'm/s/m')

leglis = [a.legend(loc=0) for a in ax]
[leg.get_frame().set_alpha(0.5) for leg in leglis]
[a.set_yscale(linlog) for a in ax]

[a.set_xlabel("X component (m)") for a in ax]  
ax[0].set_ylabel("emitting angle difference (deg)" + logsuffix)
ax[1].set_ylabel("path length difference (m)" + logsuffix)
ax[2].set_ylabel("time difference (s)" + logsuffix)
ax[0].set_title("point position difference in function of the X \n position of the reciever for different gradients" )
ax[1].set_title("path length difference in function of the X \n position of the reciever for different gradients" )
ax[2].set_title("time difference in function of the X \n position of the reciever for different gradients" )
if not linlog == 'log':
    ax[2].ticklabel_format(style='sci', axis='y', scilimits=(0,0))

fig.suptitle("point position and time difference compared to a eikonikal raytracing without gradient \n in function of the the X position of the reciever for different gradients (mixed layer max. depth set at " + str(mixlay) + 'm)')
#plt.ticklabel_format(style='sci', axis='y', scilimits=(0,0))

fig.set_size_inches(16.53,11.69/2)
fig.tight_layout()
plt.subplots_adjust(top=0.83)

pltname = gf.join_improved('_', 'indirect','grad', 'X')

pltpath = os.path.join(plotdir, pltname)
plt.savefig(pltpath + '.png')
plt.savefig(pltpath + '.pdf')

###############################################################################

pdw = copy.deepcopy(DF)
pdw = pdw[ pdw['smoothtype'] == 'lin' ]

XR , YR , ZR = 2000 , 0 , 2000 
mixlay = 200

#gradmin = np.min(pdw['xgrad'])
#gradmax = np.max(pdw['xgrad'])

#zsmoothmin = np.min(pdw['zsmooth'])
#zsmoothmax = np.max(pdw['zsmooth'])

pdw = pdw[ pdw['xr'] == XR ]
pdw = pdw[ pdw['yr'] == YR ]
#pdw = pdw[ pdw['zr'] == ZR ]

pdw = pdw[ pdw['zsmooth'] == mixlay ]
fig , ax = plt.subplots(1,3)
colis = gf.color_list(np.unique(pdw['xgrad']))

for i,xgrad in enumerate(np.unique(pdw['xgrad'])):
    pdww = pdw[(pdw['xgrad'] == xgrad)] 
    X,Y = gf.sort_binom_list(pdww['zr'] , pdww['diff_ang1'])
    if linlog == 'log':
        Y = np.abs(Y)
    ax[0].plot(X,Y, 'o-', c=colis[i] , label = str(xgrad) + 'm/s/m' )
    X,Y = gf.sort_binom_list(pdww['zr'] , pdww['diff_s'])
    if linlog == 'log':
        Y = np.abs(Y)
    ax[1].plot(X,Y, 'o-', c=colis[i] , label = str(xgrad) + 'm/s/m')
    X,Y = gf.sort_binom_list(pdww['zr'] , pdww['diff_t'])
    if linlog == 'log':
        Y = np.abs(Y)
    ax[2].plot(X,Y, 'o-', c=colis[i] , label = str(xgrad) + 'm/s/m')

leglis = [a.legend(loc=0) for a in ax]
[leg.get_frame().set_alpha(0.5) for leg in leglis]
[a.set_yscale(linlog) for a in ax]
[a.set_xlabel("Z component (m)") for a in ax]  

ax[0].set_ylabel("emitting angle difference (deg)" + logsuffix)
ax[1].set_ylabel("path length difference (m)"      + logsuffix)
ax[2].set_ylabel("time difference (s)"             + logsuffix)

ax[0].set_title("point position difference in function of the Z (depth) \n position of the reciever for different gradients" )
ax[1].set_title("path length difference in function of the Z (depth) \n position of the reciever for different gradients" )
ax[2].set_title("time difference in function of the Z (depth) \n position of the reciever for different gradients" )

if not linlog == 'log':
    ax[2].ticklabel_format(style='sci', axis='y', scilimits=(0,0))

fig.suptitle("point position and time difference compared to a eikonikal raytracing without gradient \n in function of the the Z (depth) position of the reciever for different gradients (mixed layer max. depth set at " + str(mixlay) + 'm)')
#plt.ticklabel_format(style='sci', axis='y', scilimits=(0,0))

fig.set_size_inches(16.53,11.69/2)
fig.tight_layout()
plt.subplots_adjust(top=0.83)

pltname = gf.join_improved('_', 'indirect','grad', 'Z')

pltpath = os.path.join(plotdir, pltname)

plt.savefig(pltpath + '.png')
plt.savefig(pltpath + '.pdf')