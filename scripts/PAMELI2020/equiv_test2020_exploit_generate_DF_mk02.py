#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Oct 25 15:08:43 2020

@author: psakicki
"""

#### Import star style
from geodezyx import *                   # Import the GeodeZYX modules
from geodezyx.externlib import *         # Import the external modules
from geodezyx.megalib.megalib import *   # Import the legacy modules names

# p="/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/02_/PAM_BST_v221_m2507-1109_m5_d02_bea2_RGF93_RTKLIB_GPSonly/log/20201021_135322_PAM_BST_v221_m2507-1109_m5_d02_bea2_RGF93_RTKLIB_GPSonly_0.pik"
# p="/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/02_/PAM_BST_v211_m2507-1158_m3_d04_bea1_RGF93_RTKLIB_GPSonly/log/20201021_213501_PAM_BST_v211_m2507-1158_m3_d04_bea1_RGF93_RTKLIB_GPSonly_0.pik"
# p="/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/02_/PAM_BST_v231_m2507-1245_m4_d06_bea3_RGF93_RTKLIB_GPSonly/log/20201021_221405_PAM_BST_v231_m2507-1245_m4_d06_bea3_RGF93_RTKLIB_GPSonly_0.pik"


with_output = 1
with_rms = True



### 03j
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/03_j_win_weight_range_3"
### 03l
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/03_l_win_weight_range_5_no_overlap"


### 05a
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/05_a_reboot03_n_RealTimeUpCorrectedmv"

### 05b
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/05_b_eq_a_plus_Up_from_postproc"

### 05c
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/05_c_cumulative_window"


### 05d
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/05_d_day12_cw_acw_1"

### 05e
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/05_e_day12_cw_acw_2"

### 05f
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/05_f_day12_cw_acw_3"


### 03g
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/03_g_weight_range_good_2"


### 07b
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/07_b_slice_circle_2"
### 07c
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/07_c_chunk_circle"
### 07d
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/07_d_unik_circle_2"
### 07a
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/07_a_weight_range_1"




### 04a
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/04_b_StaticCenter"

pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/04_b_StaticCenter/PAM_BST_v401a_m21ma_d01_ITRF14_RTKLIB"
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/04_b_StaticCenter/PAM_BST_v402a_m21so_d10_ITRF14_RTKLIB"
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/04_b_StaticCenter/PAM_BST_v403a_m22so_d11_ITRF14_RTKLIB"

### 06a
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/06_a_StaticAbove"


### 03_m
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/03_m_unik_circle"
### 03_o
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/03_o_slice_circle"
### 03_n
pbig = "/home/psakicki/GFZ_WORK/PROJECTS_OTHERS/2001_PAMELi_GNSSA/02_PREPROCESSING/03_n_chunk_circle"

#################### STATIC MUST BE REEXPORTED WITH 
#####' /home/psakicki/CODES/acoustyx_toolbox_2_py3/scripts/PAMELI2020/equiv_test2020_plots_radar_mkXXX.py


Pbig = utils.find_recursive(pbig,"*log*")
Pbig = list(np.unique([os.path.dirname(e) for e in Pbig]))

### 03c
Weight = [10**float(n) for n in np.arange(-6,7)]

### 03e
Tab_p_twtt_proto     = np.arange(1*10**-5,10*10**-5,2*10**-5)
### Tab_p_dir_vect_proto = np.arange(1*10**-3,12*10**-2,2*10**-2) too loose
Tab_p_dir_vect_proto = np.arange(1*10**-3,1.2*10**-2,2*10**-3)

Weight = np.vstack(list(itertools.product(Tab_p_twtt_proto,Tab_p_dir_vect_proto)))

DFstk = []

for iplog,plog in enumerate(Pbig):

    P = utils.find_recursive(str(plog),"*.pik")
    
    Lines = []
    
    Xnew_stk = []
    for ip,p in enumerate(P):
        
        fullname = os.path.dirname(p).split("/")[-2]
        try:
            name     = fullname.split("bea")[1][2:]
            beabkp   = int(fullname.split("bea")[1][0])
        except:
            name     = fullname.split("_d")[1][3:]
            beabkp   = -1           

        sym = utils.symbols_list(range(10000))[iplog]
                
        DictIteraStore = utils.pickle_loader(p)
        DictLastIter = DictIteraStore[list(DictIteraStore.keys())[-1]]
        
        ################# Per default Vals ####################
        Xapri = DictLastIter["Xapri"].squeeze()
        Xnew  = DictLastIter["Xnew"]
        Sigma = DictLastIter["Sigma"]
        fuv   = DictLastIter["fuv"]
        Chi2  = DictLastIter["chi2"][-1]
        wei_twtt = DictLastIter["p_twtt"]
        wei_dv = DictLastIter["p_dir_vect"]
        
        
        DFbig = DictLastIter["DFbig"]
        B_TWTT = DFbig.B_TWTT[DFbig.VALID]
        
        #B = DictLastIter["B"]**2
        c = DictLastIter["c_ref_new"]
        rmsmean = stats.rms_mean(B_TWTT)
        rmsmean = np.std(B_TWTT)

        try:
            bea = int(DictLastIter["beacon"])
        except:
            bea = beabkp


        if np.isclose(wei_dv,0.):
            wei_dv = np.inf
        
        if len(Xnew) == 3:
            Xnew = np.append(Xnew,np.nan)
            Sigma = np.append(Sigma,np.nan)
            c_esti = False
        else:
            c_esti = True
            
            
        
        if ip == 0:
            Col_names = ['BEA','NAME','C_esti','W_TWTT','W_DV','N','E','D','C','sN','sE','sD','sC'] 
        
        line = [bea,np.nan,c_esti,wei_twtt,wei_dv] + list(Xnew[:]) + list(Sigma[:])
        
        
        if with_rms:
            line = line + [rmsmean,rmsmean*1520.420803,rmsmean*c,c]            
            if ip == 0:
                List_rms_colnam = ["RMS","RMSd","RMSd_capri","C2"]
                Col_names = Col_names + List_rms_colnam        
        
            
        ############### WINDOW
        if "win_srt_twtt" in DictLastIter.keys():
            List_win_data   = [DictLastIter['win_srt_twtt']] + [DictLastIter['win_len_twtt']] + list(Xapri)
            List_win_colnam = ['win_srt_twtt'] + ['win_len_twtt'] + ["Napri","Eapri","Dapri"]

            line = line + List_win_data
            if ip == 0:
                Col_names = Col_names + List_win_colnam
            
            
            
        ############### BOXIN (A)CW
        re_boxin = re.compile("_m..?.?_")
        re_vers  = re.compile("_v..._")
        re_day   = re.compile("_day._")

        re_boxin_res = re_boxin.search(fullname)
        re_vers_res  = re_vers.search(fullname)
        re_day_res   = re_day.search(fullname)

        if re_boxin_res and re_day_res:
            boxin = re_boxin_res.group(0)[2:-1]
            vers  = re_vers_res.group(0)[2:-1]
            day   = int(re_day_res.group(0)[-2])
            
            List_boxin_data   = [boxin,day]
            List_boxin_colnam = ['boxin','day']

            line = line + List_boxin_data
            if ip == 0:
                Col_names = Col_names + List_boxin_colnam
            
        
        
        #################### FINAL stk #######################
        Lines.append(line)
        ######################################################


            

    
    DF = pd.DataFrame(np.vstack(Lines))
    #DF = DF[DF[11] == 1]

    pd.set_option('display.float_format', lambda x: '%.6f' % x)
    
    print("******",name)
    DF.columns =  Col_names  
    
    DF.NAME   = name
    DF.BEA    = DF.BEA.astype(int)
    DF.C_esti = DF.C_esti.astype(bool)
    
    for col in ['W_TWTT','W_DV','N','E','D','C','sN','sE','sD','sC']:
        DF[col] = DF[col].astype(float)
    
    DFstk.append(DF)
                   
    if False:
        print(DF.to_string())
    else:
        print(DF[['BEA','NAME','C_esti',"W_DV",'RMS','RMSd',"RMSd_capri"]].to_string())
    
    
DFall = pd.concat(DFstk)


if with_output:
    outpath = utils.pickle_saver(DFall,pbig,os.path.basename(pbig)[0:4])
    print(outpath)
else:
    print("WARN output is desactivated")


##############################################################################
##############################################################################
##############################################################################
        

    


    
    
    
