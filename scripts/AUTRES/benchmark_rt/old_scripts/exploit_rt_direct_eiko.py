# -*- coding: utf-8 -*-
"""
Created on Sat Feb 20 16:47:51 2016

@author: psakicki


DISCONTINUÃ‰ CAR TROP COMPLEXE !!!!!

"""

from megalib import *
import matplotlib.pyplot as plt

inppick = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/direct/20160223_051611_benmk_direct.pik"
inppick = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/direct/20160302_022605_benmk_direct_more_h.pik"

D = gf.pickle_loader(inppick)
plt.ion()

keylis = list(D.keys())

anglis  = sorted(list(set([e[3] for e in keylis])))
zmaxlis = sorted(list(set([e[2] for e in keylis])))
resolis = sorted(list(set([e[1] for e in keylis])))

refzmax = 2000
refang  = 40

z_ang_tup_lis_proto = list(itertools.product(zmaxlis,anglis))
#z_ang_tup_lis = [z_ang_tup_lis[0]]

# cleaning z_ang_tup_lis
z_ang_tup_lis = []
zmax , amax = np.max(np.array(list(zip(*z_ang_tup_lis_proto))),1)
zmin , amin = np.min(np.array(list(zip(*z_ang_tup_lis_proto))),1)

#zmax , amax = (3000,60)
#zmin , amin = (1000,40)

zmax , amax = (3000,80)
zmin , amin = (1000,20)

for z_ang_tup in z_ang_tup_lis_proto:
    if (z_ang_tup[0] in (zmin,zmax)) and (z_ang_tup[1] in (amin,amax)):
        z_ang_tup_lis.append(z_ang_tup)
     
dicolislis = []

for z_ang_tup in z_ang_tup_lis:
#fig , ax = plt.subplots()
    plotdic_h_diff = dict()
    plotdic_h_time = dict()
    plotdic_h_t    = dict()
    plotdic_h_s    = dict()
    
    for r in resolis:
        plotdic_h_diff[r] = ([],[])
        plotdic_h_time[r] = ([],[])
        plotdic_h_t[r] = ([],[])
        plotdic_h_s[r] = ([],[])
    
    plotdic_h_diff['title'] = 'point position difference \n' + 'angle = ' + str(z_ang_tup[1]) + 'deg., ' + 'max. depth = ' + str(z_ang_tup[0]) +'m'
    plotdic_h_time['title'] = 'execution time \n' + 'angle = ' + str(z_ang_tup[1]) + 'deg., ' + 'max. depth = ' + str(z_ang_tup[0]) +'m'
    plotdic_h_t['title']    = 'propagation time difference \n' + 'angle = ' + str(z_ang_tup[1]) + 'deg., ' + 'max. depth = ' + str(z_ang_tup[0]) +'m'
    plotdic_h_s['title']    = 'path length difference \n' + 'angle = ' + str(z_ang_tup[1]) + 'deg., ' + 'max. depth = ' + str(z_ang_tup[0]) +'m'
    
    if False:
        plotdic_h_diff['xscale'] = 'linear'
        plotdic_h_time['xscale'] = 'linear'
        plotdic_h_t['xscale']    = 'linear'
        plotdic_h_s['xscale']    = 'linear'
    else:
        plotdic_h_diff['xscale'] = 'log'
        plotdic_h_time['xscale'] = 'log'
        plotdic_h_t['xscale']    = 'log'
        plotdic_h_s['xscale']    = 'log'  

    plotdic_h_diff['yscale'] = 'log'
    plotdic_h_time['yscale'] = 'log'
    plotdic_h_t['yscale']    = 'linear'
    plotdic_h_s['yscale']    = 'linear'

    plotdic_h_diff['ylim'] = (10**-5,10**3)
    plotdic_h_time['ylim'] = (10**-4,10**1)
    plotdic_h_t['ylim']    = (-0.025,0.0005)

    plotdic_h_diff['ylabel'] = 'distance difference (m), log. scale'
    plotdic_h_time['ylabel'] = 'mean execution time (s), log. scale'
    plotdic_h_t['ylabel']    = 'propagation time (s)'
    plotdic_h_s['ylabel']    = 'path length difference (m)'

    for k in keylis:
        h , reso , zmax  , ang , adap = k
        print(k)
        
        if not  ang == z_ang_tup[1]:
            continue
        if not zmax == z_ang_tup[0]:
            continue
        if not adap:
            continue
        
        sol_sd       = D[k]['SD']
        sd_ref_pt    = np.array([sol_sd[0][0] , sol_sd[0][1]])
        sd_ref_s     = sol_sd[0][-1] 
        sd_ref_t     = sol_sd[0][-2] 
        sd_ref_time  = sol_sd[1]
        sgeom   = np.linalg.norm(sd_ref_pt)
        anggeom = 90 - np.rad2deg(np.arctan2(sd_ref_pt[1],sd_ref_pt[0]) )
        
        
        sol_eiko     = D[k]['eiko']
        eiko_pt      = np.array([geok.pythagore(sol_eiko[0][0][0],sol_eiko[0][0][1]) ,
                                 sol_eiko[0][0][2]])
        eiko_s       = sol_eiko[0][1]
        
        eiko_t          = sol_eiko[0][2]
        diff_pt_sd_eiko = np.linalg.norm(sd_ref_pt - eiko_pt)
        diff_t_sd_eiko  = eiko_t - sd_ref_t
        diff_s_sd_eiko  = eiko_s - sd_ref_s
        
        plotdic_h_diff[reso][0].append(h)
        plotdic_h_diff[reso][1].append(diff_pt_sd_eiko)
        plotdic_h_time[reso][0].append(h)
        plotdic_h_time[reso][1].append(sol_eiko[-1])  
        #plotdic_h_time['sdref'] = sd_ref_time
        plotdic_h_t[reso][0].append(h)
        plotdic_h_t[reso][1].append(diff_t_sd_eiko) 
        plotdic_h_s[reso][0].append(h)
        plotdic_h_s[reso][1].append(diff_s_sd_eiko) 
        
    dicolis = [plotdic_h_diff , plotdic_h_s , plotdic_h_t , plotdic_h_time]
    dicolis = [plotdic_h_time]
    dicolis = [plotdic_h_diff , plotdic_h_t , plotdic_h_time]
    dicolislis.append(dicolis)

    if 0:
        fig , axarr  = plt.subplots(1,3)
        fig.suptitle('Eikonal raytracings vs Snell-Descartes raytracing as reference')
        axarr = np.array(axarr.flat)
        
        for i , dico in enumerate(dicolis):
            ax = axarr[i]
            ax.set_xscale(dico['xscale'])
            ax.set_yscale(dico['yscale'])
            ax.set_xlim(0.99,3100)
            if 0:
                ax.set_ylim(dico['ylim'])
                
            ax.set_xlabel('integration step (m), log. scale')
            ax.set_ylabel(dico['ylabel'])
    
            for r , rdata in dico.items():
                if r  == 'sdref':
                    print("sdref")
                    ax.axhline(y=rdata,c="red",linewidth=1)
                if not r in resolis:
                    continue
    
                X,Y = gf.sort_binom_list(rdata[0],rdata[1],True)
                Y = Y[X <= 100]
                X = X[X <= 100]
                ax.plot(X,Y,'o-',label=r)
            ax.set_title(dico['title'])
            ax.legend(loc='best')
            
        fig.set_size_inches(16.53,11.69*.5)
        fig.tight_layout()
        plt.subplots_adjust(top=0.93)
        
        pltdir  = "/home/psakicki/aaa_FOURBI/"
        pltname = gf.join_improved('_', 'direct','ang', 
                                   z_ang_tup[1] , 'z' , 
                                   z_ang_tup[0] , 'notsamescale')
        pltpath = os.path.join(pltdir, pltname)
        plt.savefig(pltpath + '.png')
        plt.savefig(pltpath + '.pdf')
        
        plt.close('all')

# =============================================

fig , bigaxarr  = plt.subplots(len(dicolislis),3)
fig.suptitle('Eikonal raytracings vs Snell-Descartes raytracing as reference, emission angle = ' + str(z_ang_tup[1]) + 'deg., ' + 'max. depth = ' + str(z_ang_tup[0]) +'m' )

for j , dicoliss in enumerate(dicolislis):
    axarr = bigaxarr[j,:]
    for i , dico in enumerate(dicoliss):
        ax = axarr[i]
        ax.set_xscale(dico['xscale'])
        ax.set_yscale(dico['yscale'])
        ax.set_xlim(0.99,3100)
        if 0:
            ax.set_ylim(dico['ylim'])
            
        ax.set_xlabel('integration step (m), log. scale')
        ax.set_ylabel(dico['ylabel'])

        for r , rdata in dico.items():
            if r  == 'sdref':
                print("sdref")
                ax.axhline(y=rdata,c="red",linewidth=1)
            if not r in resolis:
                continue
            if r == 'euler':
                continue

            X,Y = gf.sort_binom_list(rdata[0],rdata[1],True)
            Y = Y[X <= 100]
            X = X[X <= 100]
            ax.plot(X,Y,'o-',label=r)
        ax.set_title(dico['title'])
        ax.legend(loc='best')
    
fig.set_size_inches(16.53*np.sqrt(2),11.69*np.sqrt(2))

fig.tight_layout()
plt.subplots_adjust(top=0.90)

plotdir = "/home/psakicki/THESE/RENDU/1603_graphs_benchmk_rt/direct/"

pltname = gf.join_improved('_', 'direct','ang', 
                           z_ang_tup[1] , 'z' , 
                           z_ang_tup[0] , 'lin')
                           
pltpath = os.path.join(plotdir, pltname)
plt.savefig(pltpath + '.png')
plt.savefig(pltpath + '.pdf')

#plt.close('all')

    
    