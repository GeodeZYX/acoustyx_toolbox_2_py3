#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Apr  4 14:58:29 2017

@author: psakicki
"""

from megalib import *
import matplotlib.pyplot as plt

#if gf.get_computer_name() == 'calipso':
#    pickdir = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/direct/"
#    plotdir = "/home/psakicki/THESE/RENDU/1603_graphs_benchmk_rt/direct_gradient/"
#    plotdir = "/home/psakicki/THESE/RENDU/1703_graphs_benchmk_rt_REBOOT/direct_gradient/"
#
#else:    
#    pickdir =  "/home/psakicki/Documents/CODES/acoustyx_toolbox_2/scripts/benchmark_rt/results/direct/"
#    plotdir =  "/home/psakicki/Documents/RENDU_1703_graphs_benchmk_rt/direct_gradient/"
    
if gf.get_computer_name() == 'calipso':
    dir_prefix = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/'
elif gf.get_computer_name() == '':
    dir_prefix = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/'
else:
    dir_prefix = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/'


# REBOOT 1703
protopath =  dir_prefix + '/scripts/benchmark_rt/results_REBOOT1703/direct/*pik'
plotdir   =  dir_prefix + "/scripts/benchmark_rt/results_REBOOT1703/PLOT"

## FIRST VERSION
#path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160226_155455_benmk_direct_tstgrd.pik'
#path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160226_155455_benmk_direct_tstgrd.pik'
#path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160309_173215_benmk_direct_grd.pik'
#path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160310_171652_benmk_direct_grd.pik'
#
## REBOOT 1703
#path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results_REBOOT1703/Run_1/20170324_160504_benmk_direct_grd_atal.pik'
#path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results_REBOOT1703/Run_1/20170324_160512_benmk_direct_grd_meteor.pik'
#
#path = '/home/psakicki/Documents/CODES/acoustyx_toolbox_2/scripts/benchmark_rt/results_REBOOT1703/20170404_151006_benmk_direct_grdmunk_n_add_meteor.pik'
#path = '/home/psakicki/Documents/CODES/acoustyx_toolbox_2/scripts/benchmark_rt/results_REBOOT1703/20170404_121331_benmk_direct_grdrealistik_add_meteor.pik'
#path = '/home/psakicki/Documents/CODES/acoustyx_toolbox_2/scripts/benchmark_rt/results_REBOOT1703/20170404_121427_benmk_direct_grdrealistik_simple_meteor.pik'

Lpath = glob.glob(protopath)

for path in Lpath:

    D    = gf.pickle_loader(path)
    ship = os.path.basename(path).split('.')[0].split('_')[-1]
    ship = os.path.basename(path).split('.')[0].split('direct_')[-1]
    
    
    #gros nettoyage de equivalents qui servent Ã  rien
    
    for item in list(D.items()):
        for k in list(item[1].keys()):
            if 'equiv' in k:
                item[1].pop(k,None)
    
    stklis = []         
    for k1 , item1 in list(D.items()):
        _,_,zmax,ang,_,zsmooth,smoothtype,xgrad,ygrad = k1
        for k2 , item2 in list(item1.items()): 
            if k2 == 'eiko':
                r_eiko  = geok.pythagore(*item2[0][0][0:2])
                z_eiko  = item2[0][0][2]
                pt_eiko = np.array([r_eiko , z_eiko])
                t_eiko  = item2[0][-1]
                
                r_eiko_ref  = geok.pythagore(*item2[1][0][0:2])
                z_eiko_ref  = item2[1][0][2]
                pt_eiko_ref = np.array([r_eiko_ref , z_eiko_ref])
                t_eiko_ref  = item2[1][-1]
                
                        
            elif k2 == 'SD':
                r_sd    = item2[0][0]
                z_sd    = item2[0][1]
                pt_sd   = np.array([r_sd   , z_sd])
                t_sd    = item2[0][2]     
                
            
        try:  
            diff   = pt_eiko - pt_eiko_ref
            diff_t = t_eiko - t_eiko_ref
    
            if smoothtype == 'lin':
                smoothtypenum = 0
            else:
                smoothtypenum = 1
            print(zmax,ang,zsmooth,smoothtype,xgrad,ygrad,diff,np.linalg.norm(diff))
            stklis.append([zmax,ang,zsmooth,smoothtype,xgrad,ygrad,
                           r_eiko,z_eiko,pt_eiko[0],pt_eiko[1],t_eiko,
                           r_sd,  z_sd,  pt_sd[0]  ,pt_sd[1]  ,t_sd,
                           diff[0],diff[1],np.linalg.norm(diff),np.abs(diff_t)])
    
            if diff[1] > 500:
                break
        except:
            print("ca chie")
            continue
    
    
    #ax.set_xscale('log')
    #ax.set_yscale('log')
    
    
    
    import pandas as pds
    
    columns = ["zmax","ang","zsmooth","smoothtype","xgrad","ygrad",
               'r_eiko','z_eiko','pt_eiko_x','pt_eiko_y',"t_eiko",
               'r_sd',  'z_sd',  'pt_sd_x'  ,'pt_sd_y'  ,'t_sd',
               'diff_x','diff_y','diff_d','diff_t']
               
    pda = pds.DataFrame(stklis,columns=columns)
    
    ######################################################
    
    pdw = pda.copy()
    
    zuniq    = np.unique(pdw['zmax'])
    
    fig , ax = plt.subplots(1,2)
    colis    = reversed(gf.color_list(zuniq))
    fig.set_size_inches(11.69/1.5,8.27/2)
    
    if 0:
        [a.set_yscale('log') for a in ax]
        linlog = 'log. scale'
    else:
        [a.set_yscale('linear') for a in ax]
        linlog = 'lin. scale'  
        from matplotlib.ticker import FormatStrFormatter
        ax[1].yaxis.set_major_formatter(FormatStrFormatter('%.1e'))  
    
    for z,colz in zip(zuniq,colis):
        print(z)
        pdww = pdw[pdw['zmax'] == z]
        X,Y = gf.sort_binom_list(pdww['ang'] , pdww['diff_d'])
        ax[0].plot(X,Y,'o-', c=colz, label = str(z)+'m')
        X,Y = gf.sort_binom_list(pdww['ang'] , pdww['diff_t'])
        ax[1].plot(X,Y,'o-', c=colz , label = str(z)+'m')
        [a.set_xlabel("emission angle (deg)") for a in ax]  
    
    leglis = [a.legend(loc=0,title=r'$\bf{Depth}$') for a in ax]
    [leg.get_frame().set_alpha(0.5) for leg in leglis]
     
    ax[0].set_title("point position difference in function of \n the emission angle and depth" )
    ax[1].set_title("time difference in function of \n the emission angle and depth" )
    
    ax[0].set_title("point position difference" )
    ax[1].set_title("time difference" )
    
    ax[0].set_ylabel("distance difference (m), lin. scale" )
    ax[1].set_ylabel("time difference (s), lin. scale" )
    
    fig.suptitle('point position and time difference in function of emission angle and depth')
    fig.tight_layout()
    plt.subplots_adjust(top=.87)
    
    #ax[1].ticklabel_format(style='sci', axis='y', scilimits=(0,0),useOffset=0)
    #ax[1].yaxis.set_major_formatter(FormatStrFormatter('%.2f')) 
    
    pltname = gf.join_improved('_', 'direct','real', ship)
                               
    gf.create_dir(plotdir)
    pltpath = os.path.join(plotdir, pltname)
    plt.savefig(pltpath + '.png')
    plt.savefig(pltpath + '.pdf')

