# -*- coding: utf-8 -*-
"""
Created on Thu Feb 25 20:00:15 2016

@author: psakicki
"""

from megalib import *
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt

path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160226_155455_benmk_direct_tstgrd.pik'
path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160226_155455_benmk_direct_tstgrd.pik'
path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160309_173215_benmk_direct_grd.pik'
path = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/20160310_171652_benmk_direct_grd.pik'

D = gf.pickle_loader(path)

#gros nettoyage de equivalents qui servent Ã  rien

for item in list(D.items()):
    for k in list(item[1].keys()):
        if 'equiv' in k:
            item[1].pop(k,None)
   

stklis = []         
for k1 , item1 in list(D.items()):
    
    _,_,zmax,ang,_,zsmooth,smoothtype,xgrad,ygrad = k1
    
    for k2 , item2 in list(item1.items()): 
        if k2 == 'eiko':
            r_eiko  = geok.pythagore(*item2[0][0][0:2])
            z_eiko  = item2[0][0][2]
            pt_eiko = np.array([r_eiko , z_eiko])
            t_eiko  = item2[0][-1]
            
            r_eiko_ref  = geok.pythagore(*item2[1][0][0:2])
            z_eiko_ref  = item2[1][0][2]
            pt_eiko_ref = np.array([r_eiko_ref , z_eiko_ref])
            t_eiko_ref  = item2[1][-1]
            
        elif k2 == 'SD':
            r_sd    = item2[0][0]
            z_sd    = item2[0][1]
            pt_sd   = np.array([r_sd   , z_sd])
            t_sd    = item2[0][2]     
    try:  
        diff = pt_eiko - pt_sd
        if smoothtype == 'lin':
            smoothtypenum = 0
        else:
            smoothtypenum = 1
        print(zmax,ang,zsmooth,smoothtype,xgrad,ygrad,diff,np.linalg.norm(diff))
        stklis.append(np.array([zmax,ang,zsmooth,smoothtypenum,xgrad,ygrad,diff[0],
                  diff[1],np.linalg.norm(diff)]))
        if diff[1] > 500:
            break
    except:
        print("ca chie")
        continue

datarr = np.vstack(stklis)

fig , ax = plt.subplots()
#ax.set_xscale('log')
ax.set_yscale('log')

#pda = plotdataarr
pda = datarr[datarr[:,3] == 0]
pda = pda[(pda[:,4] == 10**-6) + (pda[:,4] == 10**-4)]

import pandas as pds

pdaPanda = pds.DataFrame(pda)

pdaPanda = pdaPanda.sort_values([0,1,2,4])

pdaPanda = pdaPanda.rename(columns = {0:'zmax'})
pdaPanda = pdaPanda.rename(columns = {1:'ang'})
pdaPanda = pdaPanda.rename(columns = {2:'zsmooth'})
pdaPanda = pdaPanda.rename(columns = {4:'xgrad'})

pdaPandaTrue = copy.deepcopy(pdaPanda)

L = list(itertools.product((pdaPandaTrue['zmax'].min() , pdaPandaTrue['zmax'].max()) ,
                           (pdaPandaTrue['ang'].min() , pdaPandaTrue['ang'].max()),
                            np.unique(pdaPandaTrue['xgrad'])))

L2 = list(itertools.product((pdaPandaTrue['zmax'].min() , pdaPandaTrue['zmax'].max()) ,
                           (pdaPandaTrue['ang'].min() , pdaPandaTrue['ang'].max())))


cm = plt.get_cmap('gist_rainbow')
colors = [cm(1.*i/len(L2)) for i in range(len(L2))]

for zang in L:
    pdaPanda = copy.deepcopy(pdaPandaTrue)
    pdaPanda = pdaPanda[(pdaPanda['zmax'] == zang[0]) & (pdaPanda['ang'] == zang[1])]
    pdaPanda = pdaPanda[pdaPanda['xgrad']  == zang[2]]
    
    if np.unique(pdaPanda['xgrad']) == 10**-6:
        mk = 'v'
    else:
        mk = '^'  
        
    c = colors[L2.index(zang[0:2])]
    ax.plot(pdaPanda['zsmooth'],pdaPanda[8],marker=mk,color=c)
    
### alpha => dpos



#datadic     = dict()
#z_lis       = np.unique(pda[:,0])
#ang_lis     = np.unique(pda[:,1])
#zsmooth_lis = np.unique(pda[:,2])
#xgrad_lis   = np.unique(pda[:,4])
#
#vararglis   = list(itertools.product(ang_lis,zsmooth_lis,xgrad_lis))
#
#for vararg in vararglis:
#    zsmooth , ang , xgrad = vararg 
#    pdatmp = pda[(pda[:,2] == zsmooth) + (pda[:,1] == ang) + (pda[:,4] == xgrad)]
#    datadic[vararg] = (pdatmp[:,0] , pdatmp[:,-1] , pdatmp[:,-2] , pdatmp[:,-3])
#
#Ystk = []
#
#for k,itm in datadic.iteritems():
#    X,Y = gf.sort_binom_list(itm[0] , itm[2])
#    if np.any([np.all(y == Y) for y in Ystk ]):
#        print 'aaaaaa'
#    Ystk.append(Y)
#    if k[-1] == 10**-4:
#        sym = '+'
#    else:
#        sym = 'x'
#
#    ax.plot(X,Y,sym)
#