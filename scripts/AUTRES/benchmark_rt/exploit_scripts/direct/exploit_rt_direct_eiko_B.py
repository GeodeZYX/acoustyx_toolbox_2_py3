# -*- coding: utf-8 -*-
"""
Created on Wed Mar  2 11:11:29 2016

@author: psakicki

version a privilegier 
"""

from megalib import *

picknam = "20160302_223648_benmk_direct.pik"
picknam = "20160304_191826_benmk_direct.pik"
picknam = "20160308_121449_benmk_direct.pik"
picknam = "20160309_042636_benmk_direct.pik"

if gf.get_computer_name() == 'calipso':
    pickdir = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results/direct/"
    plotdir = "/home/psakicki/THESE/RENDU/1603_graphs_benchmk_rt/direct/"
    plotdir = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/scripts/benchmark_rt/results_REBOOT1703/PLOT/dir/"
else:    
    pickdir =  "/home/psakicki/Documents/CODES/acoustyx_toolbox_2/scripts/benchmark_rt/results/direct/"
    plotdir =  "/home/psakicki//RENDU_1603_graphs_benchmk_rt/direct/"

    pickdir = '/home/adminuser/Documents/CODES/acoustyx_toolbox_2_py3/scripts/AUTRES/benchmark_rt/results/direct/'
    plotdir = '/home/adminuser/Documents/CODES//acoustyx_toolbox_2_py3/scripts/AUTRES/benchmark_rt/results_REBOOT1712/PLOT/std/'

    
    
inppick = os.path.join(pickdir,picknam)

PIK = gf.pickle_loader(inppick)

list(PIK.keys())
list(PIK.items())

endtup_stk = []

with_constr_same_y_axis = 0
rmeuler                 = 1


for k , item in PIK.items():
    endtup = tuple(k)
    endtup = endtup + tuple(item['eiko'][0][0]) + item['eiko'][0][1:3]  + (item['eiko'][1],)
    endtup = endtup + item['SD'][0] + (item['SD'][1],)
    endtup_stk.append(endtup)
    
dtp = pd.DataFrame(endtup_stk)

renamedic = gf.renamedic_fast_4_pandas('h','resotype','zmax','ang','adapbool',
                                       'xeiko','yeiko','zeiko','seiko','teiko',
                                       'execeiko','xsd','zsd','tsd','ssd','execsd')

dtp = dtp.rename(columns=renamedic)
                        
A = np.vstack((geok.pythagore(dtp['xeiko'],dtp['yeiko']),dtp['zeiko']))
B = np.vstack((dtp['xsd'],dtp['zsd']))

d_diff = np.linalg.norm(A - B,axis=0)
t_diff = dtp['teiko'] - dtp['tsd']

#dtp           = dtp.drop(pd.Index(('xeiko','yeiko','zeiko','xsd','zsd')),1)
dtp['t_diff'] = t_diff
dtp['d_diff'] = d_diff


cm     = plt.get_cmap('jet')
NCOL   = len(np.unique(dtp['resotype']))
colist = [cm(1.*i/NCOL) for i in range(NCOL)] 

if 1:
    dtp = dtp[dtp['h'] <= 100]
    
dtp_old = dtp
    
if rmeuler:
    dtp = dtp[ dtp["resotype"] != 'euler' ]

anglis = (40,)
zlis   = (3000,)

anglis = (20,80)
zlis   = (500,3000)

iterlis = list(itertools.product(zlis,anglis))
resotyplis = np.unique(dtp["resotype"])
fig , bigaxarr  = plt.subplots(len(iterlis),3)
fig.suptitle('Eikonal raytracings vs Snell-Descartes raytracing as reference' )

for i,z_ang_tup in enumerate(iterlis):
    (z,ang) = z_ang_tup
    if len(bigaxarr.shape) == 1:
        axlin = bigaxarr    
    else:
        axlin = bigaxarr[i,:]
    ax_d = axlin[0]
    ax_t = axlin[1]
    ax_e = axlin[2]
    
    [a.set_xscale('log') for a in axlin]
    ax_d.set_yscale('log')
    #ax_e.set_yscale('log')
    ax_t.set_yscale('log')
    
    execeko_stk = []
    
    for ireso , resotyp in enumerate(resotyplis):
        dtw = dtp[(dtp['ang'] == ang) & (dtp["zmax"] == z) & 
                  (dtp['resotype'] == resotyp) & (dtp['adapbool'] == True)]
        
        dtw = dtw.sort_values(['h'])
        
        if rmeuler:
            addeuler = 1
        else:
            addeuler = 0
        
        ax_d.plot(dtw['h'] , dtw['d_diff'],'o-',label=resotyp,  c=colist[ireso+addeuler])
        ax_t.plot(dtw['h'] , np.abs(dtw['t_diff']),'o-',label=resotyp,  c=colist[ireso+addeuler])
        ax_e.plot(dtw['h'] , dtw['execeiko'],'o-',label=resotyp,c=colist[ireso+addeuler])
        
        execeko_stk = execeko_stk + list(dtw['execeiko'])

        
    ax_d.set_ylabel('distance difference (m), log. scale')
    ax_e.set_ylabel('mean execution time (s), lin. scale')
    ax_t.set_ylabel('time difference (s), log. scale')
    
    if with_constr_same_y_axis:
        ax_d.set_ylim(gf.ylim_easy(dtp['d_diff']))
        ax_t.set_ylim(gf.ylim_easy(dtp['t_diff']))
        ax_e.set_ylim(gf.ylim_easy(dtp['execeiko']))
    
    [a.set_xlabel('integration step (m), log. scale') for a in axlin]
    ax_d.set_title('point position difference \n' + 'angle = ' + str(z_ang_tup[1]) + 'deg., ' + 'max. depth = ' + str(z_ang_tup[0]) +'m')
    ax_e.set_title('execution time \n' + 'angle = ' + str(z_ang_tup[1]) + 'deg., ' + 'max. depth = ' + str(z_ang_tup[0]) +'m')
    ax_t.set_title('propagation time difference \n' + 'angle = ' + str(z_ang_tup[1]) + 'deg., ' + 'max. depth = ' + str(z_ang_tup[0]) +'m')

[a.legend(loc=0) for a in bigaxarr.flat]
    
fig.set_size_inches(11.69*np.sqrt(2)*.75,(16.53/3.)*len(iterlis)*.75)
fig.tight_layout()

if len(bigaxarr.shape) == 1:
    plt.subplots_adjust(top=0.82)
else:
    plt.subplots_adjust(top=0.92)

pltname = gf.join_improved('_', 'direct','ang', 
                           z_ang_tup[1] , 'z'  , 
                           z_ang_tup[0] , 'lin')
                           
pltpath = os.path.join(plotdir, pltname)
plt.savefig(pltpath + '.png')
plt.savefig(pltpath + '.pdf')

 
##### TABS
dtww     = dtp_old[dtp_old["h"] <= 10]
meannstk = []

dicout = dict()

for dif in ('t_diff','d_diff'):
    Rlis , Hlis , Mlis = [] , [] , []    
    for h in np.unique(dtww['h']):
        for resotype in np.unique(dtww['resotype']):
            if resotype not in dicout:
                dicout[resotype] = [h]
    #        if False or resotype in ('rk2','rk4'):
    #            continue
            meann = geok.rms_mean(dtww[(dtww['h'] == h) & (dtww['resotype'] == resotype)][dif])
            meannstk.append(meann)
            dicout[resotype].append(meannstk)
            
            #print resotype , h , meann
            
            Rlis.append(resotype)
            Hlis.append(h)
            Mlis.append(meann)
        
    Finalis    = gf.trio_lists_2_tab(Rlis,Hlis,Mlis)  
    Finalis[0] = [s.upper() if s != 'euler' else 'Euler' for s in Finalis[0]]
    Finalis[0] = ['h (m.)'] + Finalis[0]

    from  tabulate import tabulate
    T = tabulate(Finalis, headers="firstrow", tablefmt='latex')
    
    for i in range(11):
        istr =  str(i).zfill(2)
        T = T.replace('e-' + istr , '$ \cdot 10^{-' + istr + '}$')
        
    print(T)
    
        