# -*- coding: utf-8 -*-
"""
Created on Fri Sep  2 17:39:51 2016

@author: psakicki
"""

from megalib import *
import matplotlib.pyplot as plt
from matplotlib.ticker import OldScalarFormatter, ScalarFormatter
from matplotlib.ticker import FormatStrFormatter

# =============== FINAL ===================

vertiplot = 0

mode = "grad"
mode = "std"


if mode == 'std':

    pathlis = ['/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_good_traingle/VariTempor/traj-perturbed',
               '/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_good_traingle/VariTempor/basic',
               '/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_good_traingle/VariTempor/ss-bruit-surface',
               '/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_good_traingle/VariTempor/basic_mode_pire_j_restitued_avec_le_best_SSP',
               '/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_good_traingle/VariTempor/zonal1045',
               '/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_good_traingle/VariTempor/zonal1056']

    pathlis = ["/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/VariTempor/basic",
               "/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/VariTempor/traj-perturbed",
               "/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/VariTempor/zonal1045",
               "/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/VariTempor/zonal1056",
               "/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/VariTempor/ss-bruit-surface",
               "/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/VariTempor/worst_w_best",
               "/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/VariTempor/basic_dekal"]

    pathlis = ["/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/VariTempor/ss-bruit-surface"]

    pathlis = ["/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/VariTempor_DEBUGED/basic"]
    
    pathlis = ['/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/VariTempor/basic/']
    


elif mode == 'grad':
   

    pathlis = ["/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_good_traingle/GradientEffect/Std/METEOR",
               "/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_good_traingle/GradientEffect/Std/ATAL"]

    pathlis = ['/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/GradientEffect/ATAL',
               '/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/GradientEffect/METEOR']
               
               
    

for path in pathlis:
    exp_name = os.path.basename(path)

    path = path + '/'
    
    explis    =  glob.glob(path + '//FINAL*')
    
    expdiclis = [glob.glob(e + '/*exp')[0] for e in explis if len(glob.glob(e + '/*exp')) != 0]
    expdiclis = [gf.pickle_loader(e) for e in expdiclis]
    expdiclis = [e[-1] for e in expdiclis]
    
    # E témoin
    E = expdiclis[0]
    list(E.keys())
    
    varparam_lis = ['Nb pings']
    #'ecart 2D bary brut/vrai en distance'
    #'ecart 3D bary MC/vrai en distance',
    #'ecart 3D bary brut/vrai en distance']
    
    for e in expdiclis:
        for vp in varparam_lis:
            e[vp]
    
    #explis = [path]
    
    expdiclis4tab = [glob.glob(e + '/*exp')[0] for e in explis  if len(glob.glob(e + '/*exp')) != 0]
    expdiclis4tab = [gf.pickle_loader(e) for e in expdiclis4tab]
    expdiclis4tab_orig = expdiclis4tab
    expdiclis4tab = [e[-1] for e in expdiclis4tab]

    for e , e0 in zip(expdiclis4tab,expdiclis4tab_orig):
        e['sigmas_first'] = e0[1]['sigmas']
    
    if mode == 'std':
        varparam_lis = ['Nb pings',
                        'design',
                        'traject.',
                        'SSP varia.']
                                
        designList      = ['triangle', 'petit-carree'   , 'grand-carree' , 'grand-trigrangle']
        designprintList = ['triangle (petit)', 'carrée (petit)' , 'carrée (grand)','triangle (grand)']

    elif mode == 'grad' :
        varparam_lis = ['Nb pings',
                        'design',
                        'traject.',
                        'mission']
    
        designList      = ['triangle', 'petit-carree'   , 'grand-carree' , 'grand-trigrangle']
        designprintList = ['triangle (petit)', 'carrée (petit)' , 'carrée (grand)','triangle (grand)']

    expdiclis4tab_valid = []
    
    rm_triangle = True
    for e in expdiclis4tab:
        
        still_valid = True
        
        for traj, trajprint in zip(['_3x','R50'],['Passes','Station']):
            if  traj in e['path']:
                e['traject.']   = trajprint
                break

        for design , designprint in zip(designList, designprintList):
            if rm_triangle and 'tri' in e['path']:
                still_valid = False
            if design in e['path']:
                e['design'] = designprint
                break
    
        if mode == 'std':
            
            for datte, datteprint in zip(['2007','2009','2010'],['Median','Pire','Meilleur']):
                if  datte in e['path']:
                    e['SSP varia.'] = datteprint
                    break
                
        if mode == 'grad':
            for ship, mission in zip(['ATAL','METEOR'],['Atalante','Meteor']):
                if  ship in e['path']:
                    e['mission'] = mission
                    break


        e['Nb pings'] = int(np.ceil( e['Nb pings'] / 100.0)) * 100
        
        if still_valid:
            expdiclis4tab_valid.append(e)    

    outtup = acls.table_summary_print(expdiclis4tab_valid,out_tab=0,
                                   out_exp_name_column=0,
                                   print_check_mark=1,
                                   title_testparam = 'Ecart 2D au barycentre',
                                   chkmrk='BKSLHcmark',
                                   cross ='BKSLHxmark',
                                   varparam_lis = varparam_lis,
                                   varparam_are_bool=0,
                                   normalize_column_title_size = False)

#Ecart 2D au barycentre
    tablines  = outtup[0]
    header    = outtup[1]
    indexsort = outtup[2]
       
    if 1:    
        symbol_manu = 0
        titledic = dict()
        titledic["ss-bruit-surface"] = 'Trajectoire parfaite'
        titledic["basic"]            = 'Trajectoire perturbée, niveau centimétrique'
        titledic["basic_dekal"]      = 'Trajectoire perturbée, niveau centimétrique, trajectoire décalée'
        titledic["traj-perturbed"]   = 'Trajectoire perturbée, niveau décimétrique'
        #titledic["ss-bruit-surface"] = ''
               
        if symbol_manu:
            symboldic = dict()
            symboldic['triangle (petit)'] = np.array((3, 0, 180))
            symboldic['triangle (grand)'] = np.array((3, 0, 0))
            symboldic[ 'carrée (petit)'] = np.array((4, 0, 0))
            symboldic[ 'carrée (grand)'] = np.array((4, 0, 45))
            symboldic['size']             = 250

        else:
            symboldic = dict()
            symboldic['triangle (petit)'] = 'v'
            symboldic['triangle (grand)'] = '^'
            symboldic[ 'carrée (petit)'] = 'D'
            symboldic[ 'carrée (grand)'] = 's'
            symboldic['size']             = 180
 
        colordic1 , colordic2 = dict() , dict()

        if mode == 'grad':
            colordic1['Atalante']    = 'darkorange'
            colordic1['Meteor']      = 'darkblue'  
            colordic2['Atalante']    = 'darkorange'
            colordic2['Meteor']      = 'darkblue'  
    
        colordic1['Median']    = 'blue'
        colordic1['Pire']      = 'darkorange'
        colordic1['Meilleur']  = 'green'  
    
        colordic2['Median']    = 'blue'
        colordic2['Pire']      = 'darkorange' 
        colordic2['Meilleur']  = 'green'
    
        rotadic   = dict()
        if mode == 'std':
            rotadic['Median']    =  0
            rotadic['Pire']      = +12
            rotadic['Meilleur']  = -12
        elif mode == 'grad':
            rotadic['Atalante']    = 0
            rotadic['Meteor']      = 0
        
        if vertiplot:
            fig, (ax1,ax2) = plt.subplots(1,2)
            fig.set_size_inches((5.8 , 8.3))
        else:
            fig, (ax1,ax2) = plt.subplots(2,1)
            fig.set_size_inches((8.3,5.8))
            
        
        for ax in (ax1,ax2):
            ax.set_yscale('log')
            ax.set_xscale('log')
            if vertiplot:
                ax.set_xlabel('# of pings \n (log scale)')
                ax.set_ylabel('Difference to the true barycenter (meters, log scale)')
            else:
                ax.set_ylabel('# of pings (log scale)')
                ax.set_xlabel('Difference to the true barycenter (meters, log scale)')
                
            if  exp_name in ('worst_w_best' , 'ATAL' , 'METEOR'):
                if vertiplot:
                    ax.set_yscale('linear')
                    ax.set_ylabel('Difference to the true barycenter (meters, linear scale)')
                else:
                    ax.set_xscale('linear')
                    ax.set_xlabel('Difference to the true barycenter (meters, linear scale)') 
                    
            SF = FormatStrFormatter("%.2e")
            #SF = ScalarFormatter(useMathText=1)
            #SF.set_scientific(True)                   
            if vertiplot:
                ax.set_xlim((70,18000))
                ax.yaxis.set_minor_formatter(SF)
                ax.yaxis.set_major_formatter(SF)

            else:
                ax.set_ylim((70,18000))
                ax.xaxis.set_minor_formatter(SF)
                ax.xaxis.set_major_formatter(SF)
                
            #ax.set_ylim((10**-4,10**-2))

        for l in outtup[0]:
            if l[2] == 'Station':
                colordicope = colordic2
                ax = ax2
                ax.set_title('Station')
                
            elif l[2] == 'Passes':
                colordicope = colordic1
                ax = ax1
                ax.set_title('Passes (x3)')
            
            if symbol_manu:
                symbol    = np.array(symboldic[l[1]])
                symbol[2] = symbol[2] + rotadic[l[-2]]
            else:
                symbol = symboldic[l[1]]
                
            sigidekal =  0
            
            if vertiplot:
                xxx = l[0] + np.random.rand() * .25 * l[0]
                yyy = l[-1 + sigidekal]
            else:
                yyy = l[0] + np.random.rand() * .25 * l[0]
                xxx = l[-1 + sigidekal]
                
            ax.scatter(xxx,yyy,color=colordicope[l[-2 + sigidekal]],
                       marker=symbol,s=symboldic['size'],alpha=0.8)
            try:
                plt.setp(ax.xaxis.get_majorticklabels(), rotation=30, fontsize=10 ,  ha='right') 
                plt.setp(ax.xaxis.get_minorticklabels(), rotation=30, fontsize=9 ,  ha='right') 
            except:
                pass
        
            if len(ax.xaxis.get_minorticklabels()) > 40:
                for label in  ax.xaxis.get_minorticklabels()[::2]:
                    label.set_visible(False)

            if exp_name == 'ss-bruit-surface':
                for ilabel , label in  enumerate(ax.xaxis.get_minorticklabels()):
                    if '9.00' in label.get_text():
                        label.set_visible(False)
         
         
        fig.tight_layout()        
        for ext in ('.pdf','.png','.svg'):
            fig.savefig(path + '/summary_plot_' + mode + '_' + exp_name + ext)
            
        try:
            fig.suptitle(titledic[exp_name])
        except:
            fig.suptitle(exp_name)
        plt.subplots_adjust(top=0.90)    
        
    
    for l in tablines:
        l[-1]  = 1000 * l[-1]
        
    with_sigma = 1
    if with_sigma: #adding sigmas
        sigmas   = [1000 * np.nanmean(e['sigmas'][:-1]) for e in expdiclis4tab_valid]
        sigmas_E = [1000 * np.nanmean(e['sigmas'][:-1:2]) for e in expdiclis4tab_valid]
        sigmas_N = [1000 * np.nanmean(e['sigmas'][1:-1:2]) for e in expdiclis4tab_valid]

        sigmas   = [1000 * np.nanmean(e['sigmas_first'][:-1]) for e in expdiclis4tab_valid]
        sigmas_E = [1000 * np.nanmean(e['sigmas_first'][:-1:2]) for e in expdiclis4tab_valid]
        sigmas_N = [1000 * np.nanmean(e['sigmas_first'][1:-1:2]) for e in expdiclis4tab_valid]


        #sigmas   = [np.round(1000*np.nanmean(e['sigmas'][:-1]),5) for e in expdiclis4tab_valid]
        #sigmas_E = [np.round(1000*np.nanmean(e['sigmas'][:-1:2]),3) for e in expdiclis4tab_valid]
        #sigmas_N = [np.round(1000*np.nanmean(e['sigmas'][1:-1:2]),3) for e in expdiclis4tab_valid]

        for idx, lin in zip(indexsort,tablines):
            lin.append(sigmas_E[idx])
            lin.append(sigmas_N[idx])

        header.append('Sigmas E')
        header.append('Sigmas N')
    
    for l in tablines:
        l[-1]  = np.round( l[-1]  , 3)
        l[-2]  = np.round( l[-2]  , 3)
        l[-3]  = np.round( l[-3]  , 4)

    tab    = tabulate.tabulate(tablines,headers=header)
    tabtex = tabulate.tabulate(tablines,headers=header,tablefmt="latex")
    tabtex = tabtex.replace('Ecart 2D au barycentre',"$E_{G,2D}$ (mm)")
    tabtex = tabtex.replace('Sigmas E',"$\\bar{\sigma}_E$ (mm)")
    tabtex = tabtex.replace('Sigmas N',"$\\bar{\sigma}_N$ (mm)")

    gf.write_in_file(tab    , path ,'summary_tab_'     + mode + '_' + exp_name)
    gf.write_in_file(tabtex , path ,'summary_tab_tex_' + mode + '_' + exp_name)
        
    print(exp_name)
    print('====================================================================')
    print(tab)
    print('====================================================================')
    print(tabtex)
    


# Envoyer les resultats dans le dossier du manus

# cd /home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/VariTempor
# find . -name '*summary*' | xargs cp -v -t /home/psakicki/THESE/RENDU/1605_MANUSCRIT/FIG/results
        

#lnes , header = outtup
