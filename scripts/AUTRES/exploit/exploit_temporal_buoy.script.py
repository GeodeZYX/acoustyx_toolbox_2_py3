# -*- coding: utf-8 -*-
"""
Created on Mon May  9 17:09:33 2016

@author: psakicki
"""

from   megalib import *
import matplotlib.pyplot as plt

workpath = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/ANTERIEUR_0903_POUR_SALUBRITE/'
prefix   = 'BUOYstyle_mk4*'

workpath = '/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/BUOY/comprendre_le_systematisme'
prefix   = '/*BUOYstyle*grand-carree*'
#
workpath = '/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_3_avec_dz_cst_et_monoZ/BUOY/Gradient'
prefix   = '/*BUOYstyle*grand-carree*'
#
workpath = "/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_3_avec_dz_cst_et_monoZ/BUOY/zonal1056"
prefix   = '/*BUOYstyle*grand-carree*'
#
workpath = "/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_3_avec_dz_cst_et_monoZ/BUOY/no-zonal-noise"
prefix   = '/*BUOYstyle*petit-carree*'
#
workpath = '/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/BUOY/comprendre_le_systematisme'
prefix   = '/*mk6g*BUOYstyle*grand-carree*'
#
workpath = '/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/BUOY/OPERA/no-zonal'
prefix   = '/*mk7*BUOYstyle*'

workpath = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working'
prefix   = '/*mk8*BUOYstyle*'

# ================================


workpath1 = '/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/BUOY/OPERA/MK8/'
workpath1 = '/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/BUOY/OPERA/MK8b_avec_500_pings'

workpath = workpath1 + '/zonal1056'
prefix   = '/*mk8*BUOYstyle*'

workpath = workpath1 + '/Gradient'
prefix   = '/*mk8*BUOYstyle*'

workpath = workpath1 + '/no-zonal'
prefix   = '/*mk8*BUOYstyle*'

# =====================================

plt.subplots_adjust(left=0.2, right=0.9, top=0.9, bottom=0.2)
matplotlib.rcParams.update({'font.size': 18})

workpath1 = '/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/BUOY/OPERA2_traj_sur_le_bord/'

workpath  = workpath1 + '/Gradient/'
prefix    = '/*Gradient*/'

workpath  = workpath1 + '/no-zonal/'
prefix    = "*no-zonal*"

Dresstk = []
Dexpstk = []

PATHLIS = sorted(glob.glob(workpath + prefix))

basename_workpath = os.path.basename(workpath)

if len(PATHLIS) == 0:
    print("NOTHING FOUND !!!!")

for path in PATHLIS:
    exppotlis =  sorted(glob.glob(os.path.join(path,'*exp')))
    if len(exppotlis) > 1:
        print("WARN : len(exppotlis) > 1 !!!!")
        
    pxp1potlis =  glob.glob(os.path.join(path,'*PXP1*'))

    if len(exppotlis) == 0 or len(pxp1potlis) == 0:
        continue
     
    Dres  = gf.pickle_loader(exppotlis[-1])   
    Dexp  = acls.give_me_the_path(path,os.path.basename(path))
        
    Dresstk.append(Dres)
    Dexpstk.append(Dexp)
    
       
xmeanstk = []
ymeanstk = []

xmean_true = 10000
ymean_true = 10000


D_to_true_centr_stk = []
Azi_to_true_centr_stk = []

plt.clf()
for Dexp , Dres in zip(Dexpstk, Dresstk):
    X = Dexp['P'][1]['t']['X_emi_clean']
    Y = Dexp['P'][1]['t']['Y_emi_clean']
    
    xmean = np.mean(X)
    ymean = np.mean(Y)
    
    xmeanstk.append(xmean)
    ymeanstk.append(ymean)
    
    D_to_true_centr = geok.dist([xmean,ymean],[xmean_true,ymean_true])
    D_to_true_centr_stk.append(D_to_true_centr)
    

    Azi_to_true_centr = np.rad2deg(np.arctan2((ymean - ymean_true),(xmean - xmean_true)) +  + np.pi * .5)
    Azi_to_true_centr_stk.append(Azi_to_true_centr)

    plt.plot(X,Y)

for i in range(4):
    Xpxp = acls.pxp_string_2_array(Dexp['P'][1+i]['c']['pxp_coords'])
    plt.plot(Xpxp[0],Xpxp[1],'bo')

plt.axis('equal')
plt.xlabel('East component (m)')
plt.ylabel('North component (m)')
#plt.title(basename_workpath)

outplotpathgeom = os.path.join(workpath,'summary_plot_buoy_geom_' + basename_workpath)
plt.savefig(outplotpathgeom + '.png')
plt.savefig(outplotpathgeom + '.pdf')

datestk = []
E2DGstk = []
AzimStk = []

def sort_by_month(datelis,datalis):
    outlis = []
    for i in range(12):
        outlis.append(list())
    for i , (date , data) in enumerate(zip(datelis,datalis)):
        outlis[date.month - 1].append(data)
        print(date.month)
    return outlis

for expdic in Dresstk:
    date = geok.string_date2dt([e for e in expdic[-1]['nom'].split('_') if '2012' in e][0])
    E2DG = expdic[-1]['ecart 2D bary brut/vrai en distance']
    E2DGCoord = expdic[-1]['ecart au bary brut/vrai en coords.'][:2]
    datestk.append(date)
    E2DGstk.append(E2DG)
    AzimStk.append(np.rad2deg(np.arctan2(*np.flipud(E2DGCoord))  + np.pi * .5 ))
    
monthlis = sort_by_month(datestk,E2DGstk)

monthlismean = [(dt.datetime(2012,i+1,15), np.mean(e)) for i,e in enumerate(monthlis) if len(e) != 0]
monthlisstd  = [(dt.datetime(2012,i+1,15), np.std(e)) for i,e in enumerate(monthlis) if len(e) != 0]

print("POSI mean " , np.mean(E2DGstk))
print("POSI std  " , np.std(E2DGstk))

# sliceIt(seq,num)


# =============================================================================

sm = plt.cm.ScalarMappable(cmap='plasma',
                           norm=plt.Normalize(vmin=np.min(D_to_true_centr_stk),
                                              vmax=np.max(D_to_true_centr_stk)))
cbar = sm.set_array(D_to_true_centr_stk)

fig = plt.figure()


axx = plt.gca()
axx.set_yscale('log')


cbarax = fig.colorbar(sm,cax=cbar)

#plt.plot(datestk,E2DGstk)

for dat , e2d , d2tru  in zip(datestk,E2DGstk,D_to_true_centr_stk):
    plt.scatter(dat,e2d,color=sm.to_rgba(d2tru))

plt.scatter(zip(*monthlismean)[0],zip(*monthlismean)[1],
            c='r',marker='d',s=100)

#plt.errorbar(zip(*monthlismean)[0],zip(*monthlismean)[1],
#             yerr=zip(*monthlisstd)[1],
#             c='r',marker='d')

plt.ylim(10**-3,1)
#plt.title(basename_workpath)
fig.autofmt_xdate()

plt.ylabel('2D Distance b/w estimated and true barycenter (m) \n log. scale')
cbarax.set_label('2D Distance b/w the buoy day \n mean posi. and the array center (m)')

outplotpathdist = os.path.join(workpath,'summary_plot_buoy_dist_log_' + basename_workpath)
plt.savefig(outplotpathdist + '.png')
plt.savefig(outplotpathdist + '.pdf')

# =============================================================================

sm = plt.cm.ScalarMappable(cmap='plasma',
                           norm=plt.Normalize(vmin=np.min(D_to_true_centr_stk),
                                              vmax=np.max(D_to_true_centr_stk)))
cbar = sm.set_array(D_to_true_centr_stk)

fig = plt.figure()

axx = plt.gca()
#axx.set_yscale('log')

cbarax = fig.colorbar(sm,cax=cbar)

#plt.plot(datestk,E2DGstk)

for dat , e2d , d2tru  in zip(datestk,E2DGstk,D_to_true_centr_stk):
    plt.scatter(dat,e2d,color=sm.to_rgba(d2tru))

#plt.scatter(zip(*monthlismean)[0],zip(*monthlismean)[1],
#            c='r',marker='d',s=100)

plt.errorbar(zip(*monthlismean)[0],zip(*monthlismean)[1],
             yerr=zip(*monthlisstd)[1],
             c='r',marker='d',fmt='d')

plt.ylim(0,0.4)
#plt.title(basename_workpath)
fig.autofmt_xdate()

plt.ylabel('2D Distance b/w estimated and true barycenter (m)')
cbarax.set_label('2D Distance b/w the buoy day \n mean posi. and the array center (m)')

outplotpathdist = os.path.join(workpath,'summary_plot_buoy_dist_linear_' + basename_workpath)
plt.savefig(outplotpathdist + '.png')
plt.savefig(outplotpathdist + '.pdf')
    
# =============================================================================

fig2 = plt.figure()
#plt.plot(datestk,AzimStk)

sm2 = plt.cm.ScalarMappable(cmap='viridis_r',
                           norm=plt.Normalize(vmin=np.min(Azi_to_true_centr_stk),
                                              vmax=np.max(Azi_to_true_centr_stk)))
                                              
cbar2 = sm2.set_array(Azi_to_true_centr_stk)
cbarax2 = fig2.colorbar(sm2,cax=cbar2)

#for dat , azi , a2tru  in zip(datestk,AzimStk,Azi_to_true_centr_stk):
#plt.scatter(dat,azi,color=sm2.to_rgba(a2tru))

#for dat , azi , a2tru  in zip(datestk,AzimStk,Azi_to_true_centr_stk):
plt.scatter(datestk,AzimStk,color=sm2.to_rgba(Azi_to_true_centr_stk))


fig2.autofmt_xdate()
plt.title('')
plt.ylabel('Azimuth b/w estimated and true barycenter (°)')
cbarax2.set_label('Azimuth diff. b/w the buoy day \n mean posi. and the array center (°)')

outplotpathazim = os.path.join(workpath,'summary_plot_buoy_azim_' + basename_workpath)
plt.savefig(outplotpathazim + '.png')
plt.savefig(outplotpathazim + '.pdf')
