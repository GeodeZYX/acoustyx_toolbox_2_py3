# -*- coding: utf-8 -*-
"""
Created on Fri Jun 10 16:55:13 2016

@author: psakicki
"""

from megalib import *
import acouclass as acls

expmaindir = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/'
expmaindir = '/home/psakicki/Documents/komparator/ARCHIVE_BATCH_RC_good/mk1_bruitzonal_mk2_bruittremporal'
expmaindir = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/ARCHIVE_BATCH_RC_good/mk3_autentik_dekal_zonal/"
expname    = 'BATCH_RC_mk1_1000_R100_noisTrue-1e-06___'

expmaindir = "/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/VariTempor/basic/FINALb_VariTempor_basic_3x333_x500_y500_ang0_nois1-0.0_vit1__date20090623_grand-carree_/"
expmaindir = "/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/FINALb_4_dz_csts_monoZ_sans_estim_barydirect/VariTempor/basic/"

expmaindir = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/workingOLD/ANTERIEUR_0903_POUR_SALUBRITE/ARCHIVE_BATCH_RC_good/mk1mk2_discont_car_pas_de_dekal/mk1_bruitzonal_mk2_bruittremporal/'

expmaindir = '/media/psakicki/Geo1_2To/CALIPSO/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/workingOLD/ANTERIEUR_0903_POUR_SALUBRITE/ARCHIVE_BATCH_RC_good/mk3_autentik_dekal_zonal/'





#expmaindir = '/home/psakicki/Documents/komparator/ARCHIVE_BATCH_RC_good/'
#expname    = "BATCH_RC_mk3_authentik_dekal_3x333_x2000_y2000_nois1-1e-06___"
expsuffix  = ''

#    exppath = os.path.join(expmaindir , expname + expsuffix)

exppathlis = glob.glob(expmaindir + '*x333*')
exppathlis = glob.glob(expmaindir + "/*")

plt.subplots_adjust(left=0.2, right=0.9, top=0.9, bottom=0.2)
matplotlib.rcParams.update({'font.size': 22})

for exppath in exppathlis:
    expname = os.path.basename(exppath)
    EXPdic  = acls.give_me_the_path(exppath,expname)
    list(EXPdic.keys())
    MNOP = acls.auto_find_extension_MNOP_files(exppath)
    plot_main     = True
    plot_ellipses = False
    save_fig = True
    
    # ======== BLOC COMMUN
    # ==== EXTRACTION des PXPs
    IDs_pxp = list(EXPdic[MNOP].keys())
    PXP_XYZ = []
    
    for idpxp in IDs_pxp:
        pxp_xyz = acls.pxp_string_2_array(EXPdic[MNOP][idpxp]['c']['pxp_coords'])
        PXP_XYZ.append(pxp_xyz)
    
    PXP_XYZ = np.vstack(PXP_XYZ)
    
    # ==== EXTRACTION trajectoire
    Xemi = EXPdic[MNOP][IDs_pxp[0]]['t']['X_emi_noise']
    Yemi = EXPdic[MNOP][IDs_pxp[0]]['t']['Y_emi_noise']
    Zemi = EXPdic[MNOP][IDs_pxp[0]]['t']['Z_emi_noise']
    Xrec = EXPdic[MNOP][IDs_pxp[0]]['t']['X_rec_noise']
    Yrec = EXPdic[MNOP][IDs_pxp[0]]['t']['Y_rec_noise']
    Zrec = EXPdic[MNOP][IDs_pxp[0]]['t']['Z_rec_noise']
    
    with_deriv = EXPdic[MNOP][IDs_pxp[0]]['c']['traject'] == 'derive'
    
    if with_deriv:
        xcenter           = EXPdic[MNOP][IDs_pxp[0]]['c']['xcenter']
        ycenter           = EXPdic[MNOP][IDs_pxp[0]]['c']['ycenter']
        R                 = EXPdic[MNOP][IDs_pxp[0]]['c']['R']
        Xcercle , Ycercle = geok.circle_draw(xcenter,ycenter,R,1000)
    
    if plot_main:
        fig , ax = plt.subplots()
        ax.ticklabel_format(useOffset=False)
        ax.scatter(PXP_XYZ[:,0],PXP_XYZ[:,1],c='b',marker='o',s=100)
        ax.plot(Xrec,Yrec,'rx',alpha=0.5)
        ax.plot(Xemi,Yemi,'+g',alpha=0.5)
        if with_deriv:
            ax.plot(Xcercle,Ycercle,'k')
        plt.axis('equal')
        ax.set_xlabel('East component (m)')
        ax.set_ylabel('North component (m)')
        
        if save_fig:
            pltfil = os.path.join(expmaindir , expname )
            plt.savefig(pltfil + '.png')
            plt.savefig(pltfil + '.pdf')
    
    res_lis = glob.glob(os.path.join(exppath,'*'))
    res_lis = []
    
    # les ellipses 
    if plot_ellipses:
        for res in res_lis:       
            RESdic = gf.pickle_loader('/home/psakicki/Documents/komparator/ARCHIVE_BATCH_RC_good/mk1_bruitzonal_mk2_bruittremporal/BATCH_RC_mk1_1000_R1000_noisTrue-1e-06___/BATCH_RC_mk1_1000_R1000_noisTrue-1e-06____00000_20160611_131046.exp')
            Ninv = RESdic[-1]['varcovar']
            
            nPXP = RESdic[-1]['nouvelles coords.'].shape[0]
            PXP  = RESdic[-1]['nouvelles coords.']
            fuv  = RESdic[-1]['f.u.v.']
        
            
            with_barycenter = RESdic[-1]['with_barycenter'] 
            if with_barycenter:
                kkk = 3
            else:
                kkk = 0
            
            scale=1000   
            for ipxp,pxp in enumerate(PXP):
                qxx = Ninv[ kkk + ipxp * 3    , kkk + ipxp * 3   ]
                qyy = Ninv[ kkk + ipxp * 3 +1 , kkk + ipxp*3 +1  ]
                qxy = Ninv[ kkk + ipxp * 3    , kkk + ipxp*3 +1  ] 
                a,b,phi  = geok.error_ellipse_parameters( qxx , qyy , qxy , fuv )
                xee , yee = geok.ellipse_get_coords(a*scale,b*scale,pxp[0],pxp[1],phi)
                plt.plot(xee,yee)
                ax.scatter(pxp[0],pxp[1],c='r',marker='o',s=100)
