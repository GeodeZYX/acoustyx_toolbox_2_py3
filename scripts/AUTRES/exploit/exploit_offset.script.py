# -*- coding: utf-8 -*-
"""
Created on Mon May  9 17:09:33 2016

@author: psakicki
"""

from   megalib import *
import matplotlib.pyplot as plt

bigexppath = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/TRAJECT_NOISE_mk1/1000pings/'
bigexppath = '/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/TRAJECT_NOISE_mk1/100pings/'

bigexppath = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/OFFSETS_mk1/1000pings/"
bigexppath = "/home/psakicki/THESE/CODES/CodePython/acoustyx_toolbox_2/working/OFFSETS_mk1/100pings/"

bigexppath = "/home/psakicki/aaa_FOURBI/OFFSETS_mk1/100pings"
bigexppath = '/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/OFFSETS_mk1/100pings'
bigexppath = "/home/psakicki/THESE/RENDU/1609_SIMU_FINAL/OFFSETS_mk1/1000pings"


kw_carac   = 'noise_'
kw_carac   = 'offsets_'

if   kw_carac == 'offsets_':
    xxlable = r"offset length on the trajectory (m)"
    labelslgd=('Local X (Bow oriented) component',
       'Local Y (Starboard oriented) component',
       'Local Z (Seafloor oriented) component')
elif kw_carac == 'noise_':
    xxlable = r"Maximum 1-$\sigma$ noise possible on the trajectory (m)"
    labelslgd=('Local X (Bow oriented) component',
       'Local Y (Starboard oriented) component',
       'Local Z (Seafloor oriented) component')
       
FILES = glob.glob(bigexppath + "/*/*exp")

if len(FILES) == 0:
    print('FILES vide !!!')

DICOS = [gf.pickle_loader(F) for F in FILES]

D = DICOS[0]
list(D[-1].keys())

mode = '2D'

Xstk = []
Ystk = []

fig , ax = plt.subplots()

#plt.xscale("log")

off_traj_max_values = np.max(np.vstack([[float(e) for e in D[-1]['path'].split(kw_carac)[1].split('_')[:3]] for D in DICOS]),0)
print(off_traj_max_values , np.linalg.norm(off_traj_max_values))

colorlis = gf.color_list(labelslgd,'plasma')
   
block_x = 0
block_y = 0
block_z = 0

#norm,x,y,z
xaxis_data = "x"

pie_or_bar = 'pie'

for D in DICOS:
    newcoords     = D[-1]['nouvelles coords.']
    ecart2D       = D[-1]['ecart 2D bary brut/vrai en distance']
    ecart3D       = D[-1]['ecart 3D bary brut/vrai en distance']
    ecartindiv    = D[-1]["ecart au bary brut/vrai en coords."]
    off_traj      = [float(e) for e in D[-1]['path'].split(kw_carac)[1].split('_')[:3]]
    
    vertibar_stk = []
    horizbar_stk = []
    
    if  xaxis_data == 'norm':
        off_traj_norm = np.linalg.norm(off_traj)
    elif xaxis_data == 'x':
        #if block_y != off_traj[1] or block_z != off_traj[2]:
        #    continue
        vertibar_stk.append(off_traj[2])
        horizbar_stk.append(off_traj[1])
        off_traj_norm = off_traj[0]
    elif xaxis_data == 'y':
        #if block_x != off_traj[0] or block_z != off_traj[2]:
        #    continue
        vertibar_stk.append(off_traj[2])
        horizbar_stk.append(off_traj[0])
        off_traj_norm = off_traj[1]
    elif xaxis_data == 'z':
        #if block_x != off_traj[0] or block_y != off_traj[1]:
        #    continue
        vertibar_stk.append(off_traj[1])
        horizbar_stk.append(off_traj[0])
        off_traj_norm = off_traj[2]
        
    off_traj_mod  = (off_traj / off_traj_max_values) / 3.
    
    if mode == '2D':
        ypie = ecart2D
        yylable = "2D distance difference compared to the barycenter true position (m)"
    elif mode == '3D':
        ypie = ecart3D
        yylable = "3D distance difference compared to the barycenter true position (m)"  
    elif mode == 'X':
        ypie = ecartindiv[0]
        yylable = "X component difference compared to the barycenter true position (m)"        
    elif mode == 'Y':
        ypie = ecartindiv[1]    
        yylable = "Y component difference compared to the barycenter true position (m)"        
    elif mode == 'Z':
        ypie = ecartindiv[2]
        yylable = "Z component difference compared to the barycenter true position (m)"        

    if pie_or_bar == 'pie':
        ax.pie(off_traj_mod, shadow=False , startangle=90 , labeldistance = 1.5 ,
               radius=0.02 , center=( off_traj_norm , ypie) , 
               frame=True,colors=colorlis) # , labels = offsets)
    else:
        horizbar_stk = np.array(horizbar_stk) * 0.5
        vertibar_stk = np.array(vertibar_stk) * 0.5

        ax.errorbar(off_traj_norm, ypie,xerr=horizbar_stk, yerr=vertibar_stk, fmt='o')

    
    ax.scatter( off_traj_norm , ypie ,5, c='k',zorder=1)   

    plt.legend(labelslgd) #,colors=['k','r','b'])

    Ystk.append(ecart2D)
    Xstk.append(off_traj_norm)
    
ax.set_xlabel(xxlable)
ax.set_ylabel(yylable)
plt.axis('equal')
#plt.plot(Xstk,Ystk,'o')
    
    
